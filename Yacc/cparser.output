Nonterminals useless in grammar

   expr1
   expr2
   term
   factor


Terminals unused in grammar

   EQUALSCHECK
   '>'
   GE
   '<'
   LE
   '+'
   '*'
   '/'


Rules useless in grammar

   47 expr1: ws expr ws '<' ws expr2 ws
   48      | ws expr ws '>' ws expr2 ws
   49      | ws expr ws LE ws expr2 ws
   50      | ws expr ws GE ws expr2 ws
   51      | ws expr ws EQUALSCHECK ws expr2 ws
   52      | ws expr2 ws

   53 expr2: ws expr2 ws '+' ws term ws
   54      | ws expr2 ws '-' ws term ws
   55      | ws term ws

   56 term: ws term ws '*' ws factor ws
   57     | ws term ws '/' ws factor ws
   58     | ws factor ws

   59 factor: ws '(' ws expr ws ')' ws
   60       | ws NUMBER ws
   61       | ws IDENT ws


State 16 conflicts: 3 shift/reduce
State 17 conflicts: 3 shift/reduce
State 18 conflicts: 3 shift/reduce
State 20 conflicts: 3 shift/reduce
State 21 conflicts: 3 shift/reduce
State 24 conflicts: 3 shift/reduce, 5 reduce/reduce
State 25 conflicts: 3 shift/reduce
State 26 conflicts: 3 shift/reduce
State 28 conflicts: 3 shift/reduce
State 29 conflicts: 3 shift/reduce
State 30 conflicts: 3 shift/reduce
State 31 conflicts: 3 shift/reduce
State 32 conflicts: 3 shift/reduce
State 48 conflicts: 3 shift/reduce
State 49 conflicts: 3 shift/reduce
State 52 conflicts: 3 shift/reduce
State 54 conflicts: 3 shift/reduce
State 55 conflicts: 3 shift/reduce
State 56 conflicts: 3 shift/reduce
State 57 conflicts: 3 shift/reduce
State 58 conflicts: 3 shift/reduce
State 73 conflicts: 3 shift/reduce
State 74 conflicts: 3 shift/reduce
State 75 conflicts: 3 shift/reduce
State 76 conflicts: 3 shift/reduce
State 77 conflicts: 3 shift/reduce
State 79 conflicts: 3 shift/reduce
State 80 conflicts: 3 shift/reduce
State 81 conflicts: 3 shift/reduce
State 82 conflicts: 3 shift/reduce
State 83 conflicts: 3 shift/reduce
State 84 conflicts: 3 shift/reduce
State 85 conflicts: 3 shift/reduce
State 86 conflicts: 3 shift/reduce
State 87 conflicts: 3 shift/reduce
State 89 conflicts: 3 shift/reduce
State 90 conflicts: 3 shift/reduce
State 91 conflicts: 3 shift/reduce
State 92 conflicts: 3 shift/reduce
State 93 conflicts: 3 shift/reduce
State 94 conflicts: 3 shift/reduce
State 95 conflicts: 3 shift/reduce
State 96 conflicts: 3 shift/reduce
State 97 conflicts: 3 shift/reduce
State 98 conflicts: 3 shift/reduce
State 99 conflicts: 3 shift/reduce
State 102 conflicts: 3 shift/reduce
State 103 conflicts: 1 shift/reduce
State 104 conflicts: 3 shift/reduce
State 107 conflicts: 3 shift/reduce
State 108 conflicts: 3 shift/reduce
State 109 conflicts: 3 shift/reduce
State 112 conflicts: 3 shift/reduce
State 118 conflicts: 3 shift/reduce
State 119 conflicts: 3 shift/reduce
State 120 conflicts: 3 shift/reduce
State 121 conflicts: 3 shift/reduce
State 129 conflicts: 3 shift/reduce
State 130 conflicts: 3 shift/reduce
State 133 conflicts: 3 shift/reduce
State 134 conflicts: 3 shift/reduce
State 135 conflicts: 3 shift/reduce
State 136 conflicts: 3 shift/reduce
State 138 conflicts: 3 shift/reduce
State 139 conflicts: 3 shift/reduce
State 140 conflicts: 3 shift/reduce
State 141 conflicts: 3 shift/reduce
State 142 conflicts: 3 shift/reduce
State 147 conflicts: 3 shift/reduce
State 150 conflicts: 3 shift/reduce
State 156 conflicts: 3 shift/reduce
State 166 conflicts: 3 shift/reduce
State 170 conflicts: 3 shift/reduce
State 172 conflicts: 3 shift/reduce
State 174 conflicts: 3 shift/reduce
State 176 conflicts: 3 shift/reduce
State 180 conflicts: 3 shift/reduce
State 181 conflicts: 14 shift/reduce
State 186 conflicts: 3 shift/reduce
State 189 conflicts: 3 shift/reduce
State 190 conflicts: 3 shift/reduce
State 193 conflicts: 3 shift/reduce
State 194 conflicts: 17 shift/reduce
State 199 conflicts: 3 shift/reduce
State 201 conflicts: 3 shift/reduce
State 203 conflicts: 3 shift/reduce
State 204 conflicts: 3 shift/reduce
State 213 conflicts: 3 shift/reduce
State 214 conflicts: 3 shift/reduce
State 216 conflicts: 3 shift/reduce
State 217 conflicts: 3 shift/reduce
State 219 conflicts: 3 shift/reduce
State 225 conflicts: 3 shift/reduce
State 226 conflicts: 3 shift/reduce
State 227 conflicts: 3 shift/reduce
State 228 conflicts: 3 shift/reduce
State 229 conflicts: 3 shift/reduce
State 232 conflicts: 3 shift/reduce
State 235 conflicts: 3 shift/reduce
State 236 conflicts: 3 shift/reduce
State 237 conflicts: 3 shift/reduce
State 239 conflicts: 3 shift/reduce
State 240 conflicts: 3 shift/reduce
State 241 conflicts: 3 shift/reduce
State 242 conflicts: 3 shift/reduce
State 248 conflicts: 3 shift/reduce
State 254 conflicts: 3 shift/reduce
State 261 conflicts: 3 shift/reduce
State 264 conflicts: 3 shift/reduce
State 265 conflicts: 3 shift/reduce
State 266 conflicts: 3 shift/reduce
State 267 conflicts: 3 shift/reduce
State 269 conflicts: 3 shift/reduce
State 270 conflicts: 3 shift/reduce
State 272 conflicts: 3 shift/reduce
State 274 conflicts: 3 shift/reduce
State 277 conflicts: 3 shift/reduce


Grammar

    0 $accept: mainstmt $end

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    2 ws: '\n'
    3   | '\t'
    4   | ' '
    5   | epsilon

    6 code: ws stmts ws

    7 epsilon: /* empty */

    8 estmt: ws '=' ws expr ws ';' ws

    9 declaration: ws INT ws IDENT ws
   10            | ws FLOAT ws IDENT ws
   11            | ws CHAR ws IDENT ws
   12            | ws LONG ws IDENT ws
   13            | ws SHORT ws IDENT ws
   14            | ws DOUBLE ws IDENT ws

   15 initialisation: declaration ws estmt ws

   16 stmts: ws declaration ws ';' ws stmts ws
   17      | ws initialisation ws stmts ws
   18      | ws ifelsestmt ws stmts ws
   19      | ws whilestmt ws stmts ws
   20      | ws dowhilestmt ws stmts ws
   21      | ws forstmt ws stmts ws
   22      | ws switchstmt ws stmts ws
   23      | ws epsilon ws
   24      | ws assignment ws ';' ws stmts ws
   25      | ws expr ws ';' ws stmts ws

   26 assignment: ws IDENT ws '=' ws expr ws

   27 ifelsestmt: ws ifstmt ws elseifstmt ws elsestmt ws

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws

   29 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws '}' ws
   30         | ws epsilon ws

   31 elseifstmt: ws ELSE ws ifstmt ws elseifstmt ws
   32           | ws epsilon ws

   33 loopcode: ws loopcode ws BREAK ws ';' ws loopcode ws
   34         | ws loopcode ws CONTINUE ws ';' ws loopcode ws
   35         | code

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

   40 casestmt: ws CASE ws expr ws ':' ws code ws casestmt ws
   41         | epsilon

   42 expr: ws sum1 ws exp2 ws

   43 exp2: ws '-' ws sum1 ws exp2 ws
   44     | epsilon

   45 sum1: ws NUMBER ws
   46     | ws '(' ws expr ws ')' ws


Terminals, with rules where they appear

$end (0) 0
'\t' (9) 3
'\n' (10) 2
' ' (32) 4
'(' (40) 1 28 29 36 37 38 39 46
')' (41) 1 28 29 36 37 38 39 46
'*' (42)
'+' (43)
'-' (45) 43
'/' (47)
':' (58) 40
';' (59) 8 16 24 25 33 34 37 38
'<' (60)
'=' (61) 8 26
'>' (62)
'{' (123) 1 28 29 36 37 38 39
'}' (125) 1 28 29 36 37 38 39
error (256)
IDENT (258) 9 10 11 12 13 14 26
IF (259) 28
TMAIN (260) 1
ELSE (261) 29 31
WHILE (262) 36 37
SWITCH (263) 39
CASE (264) 40
INT (265) 1 9
FLOAT (266) 10
DOUBLE (267) 14
LONG (268) 12
SHORT (269) 13
CHAR (270) 11
FOR (271) 38
DO (272) 37
BREAK (273) 33
CONTINUE (274) 34
EQUALSCHECK (275)
NUMBER (276) 45
END (277) 1
GE (278)
LE (279)


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
mainstmt (42)
    on left: 1, on right: 0
ws (43)
    on left: 2 3 4 5, on right: 1 6 8 9 10 11 12 13 14 15 16 17 18
    19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 37 38 39 40
    42 43 45 46
code (44)
    on left: 6, on right: 1 28 29 35 40
epsilon (45)
    on left: 7, on right: 5 23 30 32 41 44
estmt (46)
    on left: 8, on right: 15
declaration (47)
    on left: 9 10 11 12 13 14, on right: 15 16
initialisation (48)
    on left: 15, on right: 17
stmts (49)
    on left: 16 17 18 19 20 21 22 23 24 25, on right: 6 16 17 18 19
    20 21 22 24 25
assignment (50)
    on left: 26, on right: 24 38
ifelsestmt (51)
    on left: 27, on right: 18
ifstmt (52)
    on left: 28, on right: 27 31
elsestmt (53)
    on left: 29 30, on right: 27
elseifstmt (54)
    on left: 31 32, on right: 27 31
loopcode (55)
    on left: 33 34 35, on right: 33 34 36 37 38
whilestmt (56)
    on left: 36, on right: 19
dowhilestmt (57)
    on left: 37, on right: 20
forstmt (58)
    on left: 38, on right: 21
switchstmt (59)
    on left: 39, on right: 22
casestmt (60)
    on left: 40 41, on right: 39 40
expr (61)
    on left: 42, on right: 8 25 26 28 36 37 38 39 40 46
exp2 (62)
    on left: 43 44, on right: 42 43
sum1 (63)
    on left: 45 46, on right: 42 43


State 0

    0 $accept: . mainstmt $end

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    mainstmt  go to state 4
    ws        go to state 5
    epsilon   go to state 6


State 1

    2 ws: '\n' .

    $default  reduce using rule 2 (ws)


State 2

    3 ws: '\t' .

    $default  reduce using rule 3 (ws)


State 3

    4 ws: ' ' .

    $default  reduce using rule 4 (ws)


State 4

    0 $accept: mainstmt . $end

    $end  shift, and go to state 7


State 5

    1 mainstmt: ws . INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    INT  shift, and go to state 8


State 6

    5 ws: epsilon .

    $default  reduce using rule 5 (ws)


State 7

    0 $accept: mainstmt $end .

    $default  accept


State 8

    1 mainstmt: ws INT . ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 9
    epsilon  go to state 6


State 9

    1 mainstmt: ws INT ws . TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    TMAIN  shift, and go to state 10


State 10

    1 mainstmt: ws INT ws TMAIN . ws '(' ws ')' ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 11
    epsilon  go to state 6


State 11

    1 mainstmt: ws INT ws TMAIN ws . '(' ws ')' ws '{' ws code ws '}' ws END

    '('  shift, and go to state 12


State 12

    1 mainstmt: ws INT ws TMAIN ws '(' . ws ')' ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 13
    epsilon  go to state 6


State 13

    1 mainstmt: ws INT ws TMAIN ws '(' ws . ')' ws '{' ws code ws '}' ws END

    ')'  shift, and go to state 14


State 14

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' . ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 15
    epsilon  go to state 6


State 15

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws . '{' ws code ws '}' ws END

    '{'  shift, and go to state 16


State 16

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' . ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 17
    epsilon  go to state 6


State 17

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws . code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 19
    epsilon  go to state 6


State 18

    6 code: ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 21


State 19

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code . ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 22
    epsilon  go to state 6


State 20

   16 stmts: ws . declaration ws ';' ws stmts ws
   17      | ws . initialisation ws stmts ws
   18      | ws . ifelsestmt ws stmts ws
   19      | ws . whilestmt ws stmts ws
   20      | ws . dowhilestmt ws stmts ws
   21      | ws . forstmt ws stmts ws
   22      | ws . switchstmt ws stmts ws
   23      | ws . epsilon ws
   24      | ws . assignment ws ';' ws stmts ws
   25      | ws . expr ws ';' ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 23
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    assignment      go to state 27
    ifelsestmt      go to state 28
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32
    expr            go to state 33


State 21

    6 code: ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 34
    epsilon  go to state 6


State 22

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws . '}' ws END

    '}'  shift, and go to state 35


State 23

    9 declaration: ws . INT ws IDENT ws
   10            | ws . FLOAT ws IDENT ws
   11            | ws . CHAR ws IDENT ws
   12            | ws . LONG ws IDENT ws
   13            | ws . SHORT ws IDENT ws
   14            | ws . DOUBLE ws IDENT ws
   26 assignment: ws . IDENT ws '=' ws expr ws
   27 ifelsestmt: ws . ifstmt ws elseifstmt ws elsestmt ws
   36 whilestmt: ws . WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws
   37 dowhilestmt: ws . DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws
   38 forstmt: ws . FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws
   39 switchstmt: ws . SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws
   42 expr: ws . sum1 ws exp2 ws

    IDENT   shift, and go to state 36
    WHILE   shift, and go to state 37
    SWITCH  shift, and go to state 38
    INT     shift, and go to state 39
    FLOAT   shift, and go to state 40
    DOUBLE  shift, and go to state 41
    LONG    shift, and go to state 42
    SHORT   shift, and go to state 43
    CHAR    shift, and go to state 44
    FOR     shift, and go to state 45
    DO      shift, and go to state 46
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 47
    epsilon  go to state 6
    ifstmt   go to state 48
    sum1     go to state 49


State 24

    5 ws: epsilon .
   23 stmts: ws epsilon . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    CASE      reduce using rule 7 (epsilon)
    BREAK     reduce using rule 5 (ws)
    BREAK     [reduce using rule 7 (epsilon)]
    CONTINUE  reduce using rule 5 (ws)
    CONTINUE  [reduce using rule 7 (epsilon)]
    '}'       reduce using rule 7 (epsilon)
    '\n'      [reduce using rule 5 (ws)]
    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 5 (ws)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 5 (ws)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 5 (ws)

    ws       go to state 50
    epsilon  go to state 6


State 25

   15 initialisation: declaration . ws estmt ws
   16 stmts: ws declaration . ws ';' ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 51
    epsilon  go to state 6


State 26

   17 stmts: ws initialisation . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 52
    epsilon  go to state 6


State 27

   24 stmts: ws assignment . ws ';' ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 53
    epsilon  go to state 6


State 28

   18 stmts: ws ifelsestmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 54
    epsilon  go to state 6


State 29

   19 stmts: ws whilestmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 55
    epsilon  go to state 6


State 30

   20 stmts: ws dowhilestmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 56
    epsilon  go to state 6


State 31

   21 stmts: ws forstmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 57
    epsilon  go to state 6


State 32

   22 stmts: ws switchstmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 58
    epsilon  go to state 6


State 33

   25 stmts: ws expr . ws ';' ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 59
    epsilon  go to state 6


State 34

    6 code: ws stmts ws .

    $default  reduce using rule 6 (code)


State 35

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' . ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 60
    epsilon  go to state 6


State 36

   26 assignment: ws IDENT . ws '=' ws expr ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 61
    epsilon  go to state 6


State 37

   36 whilestmt: ws WHILE . ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 62
    epsilon  go to state 6


State 38

   39 switchstmt: ws SWITCH . ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 63
    epsilon  go to state 6


State 39

    9 declaration: ws INT . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 64
    epsilon  go to state 6


State 40

   10 declaration: ws FLOAT . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 65
    epsilon  go to state 6


State 41

   14 declaration: ws DOUBLE . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 66
    epsilon  go to state 6


State 42

   12 declaration: ws LONG . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 67
    epsilon  go to state 6


State 43

   13 declaration: ws SHORT . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 68
    epsilon  go to state 6


State 44

   11 declaration: ws CHAR . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 69
    epsilon  go to state 6


State 45

   38 forstmt: ws FOR . ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 70
    epsilon  go to state 6


State 46

   37 dowhilestmt: ws DO . ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 71
    epsilon  go to state 6


State 47

   28 ifstmt: ws . IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws
   45 sum1: ws . NUMBER ws
   46     | ws . '(' ws expr ws ')' ws

    IF      shift, and go to state 72
    NUMBER  shift, and go to state 73
    '('     shift, and go to state 74


State 48

   27 ifelsestmt: ws ifstmt . ws elseifstmt ws elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 75
    epsilon  go to state 6


State 49

   42 expr: ws sum1 . ws exp2 ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 76
    epsilon  go to state 6


State 50

   23 stmts: ws epsilon ws .

    $default  reduce using rule 23 (stmts)


State 51

   15 initialisation: declaration ws . estmt ws
   16 stmts: ws declaration ws . ';' ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3
    ';'   shift, and go to state 77

    $default  reduce using rule 7 (epsilon)

    ws       go to state 78
    epsilon  go to state 6
    estmt    go to state 79


State 52

   17 stmts: ws initialisation ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 80


State 53

   24 stmts: ws assignment ws . ';' ws stmts ws

    ';'  shift, and go to state 81


State 54

   18 stmts: ws ifelsestmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 82


State 55

   19 stmts: ws whilestmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 83


State 56

   20 stmts: ws dowhilestmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 84


State 57

   21 stmts: ws forstmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 85


State 58

   22 stmts: ws switchstmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 86


State 59

   25 stmts: ws expr ws . ';' ws stmts ws

    ';'  shift, and go to state 87


State 60

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws . END

    END  shift, and go to state 88


State 61

   26 assignment: ws IDENT ws . '=' ws expr ws

    '='  shift, and go to state 89


State 62

   36 whilestmt: ws WHILE ws . '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws

    '('  shift, and go to state 90


State 63

   39 switchstmt: ws SWITCH ws . '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

    '('  shift, and go to state 91


State 64

    9 declaration: ws INT ws . IDENT ws

    IDENT  shift, and go to state 92


State 65

   10 declaration: ws FLOAT ws . IDENT ws

    IDENT  shift, and go to state 93


State 66

   14 declaration: ws DOUBLE ws . IDENT ws

    IDENT  shift, and go to state 94


State 67

   12 declaration: ws LONG ws . IDENT ws

    IDENT  shift, and go to state 95


State 68

   13 declaration: ws SHORT ws . IDENT ws

    IDENT  shift, and go to state 96


State 69

   11 declaration: ws CHAR ws . IDENT ws

    IDENT  shift, and go to state 97


State 70

   38 forstmt: ws FOR ws . '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '('  shift, and go to state 98


State 71

   37 dowhilestmt: ws DO ws . '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '{'  shift, and go to state 99


State 72

   28 ifstmt: ws IF . ws '(' ws expr ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 100
    epsilon  go to state 6


State 73

   45 sum1: ws NUMBER . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 101
    epsilon  go to state 6


State 74

   46 sum1: ws '(' . ws expr ws ')' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 102
    epsilon  go to state 6


State 75

   27 ifelsestmt: ws ifstmt ws . elseifstmt ws elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws          go to state 103
    epsilon     go to state 6
    elseifstmt  go to state 104


State 76

   42 expr: ws sum1 ws . exp2 ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 105
    epsilon  go to state 106
    exp2     go to state 107


State 77

   16 stmts: ws declaration ws ';' . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 108
    epsilon  go to state 6


State 78

    8 estmt: ws . '=' ws expr ws ';' ws

    '='  shift, and go to state 109


State 79

   15 initialisation: declaration ws estmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 110
    epsilon  go to state 6


State 80

   17 stmts: ws initialisation ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 111
    epsilon  go to state 6


State 81

   24 stmts: ws assignment ws ';' . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 112
    epsilon  go to state 6


State 82

   18 stmts: ws ifelsestmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 113
    epsilon  go to state 6


State 83

   19 stmts: ws whilestmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 114
    epsilon  go to state 6


State 84

   20 stmts: ws dowhilestmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 115
    epsilon  go to state 6


State 85

   21 stmts: ws forstmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 116
    epsilon  go to state 6


State 86

   22 stmts: ws switchstmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 117
    epsilon  go to state 6


State 87

   25 stmts: ws expr ws ';' . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 118
    epsilon  go to state 6


State 88

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END .

    $default  reduce using rule 1 (mainstmt)


State 89

   26 assignment: ws IDENT ws '=' . ws expr ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 119
    epsilon  go to state 6


State 90

   36 whilestmt: ws WHILE ws '(' . ws expr ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 120
    epsilon  go to state 6


State 91

   39 switchstmt: ws SWITCH ws '(' . ws expr ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 121
    epsilon  go to state 6


State 92

    9 declaration: ws INT ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 122
    epsilon  go to state 6


State 93

   10 declaration: ws FLOAT ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 123
    epsilon  go to state 6


State 94

   14 declaration: ws DOUBLE ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 124
    epsilon  go to state 6


State 95

   12 declaration: ws LONG ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 125
    epsilon  go to state 6


State 96

   13 declaration: ws SHORT ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 126
    epsilon  go to state 6


State 97

   11 declaration: ws CHAR ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 127
    epsilon  go to state 6


State 98

   38 forstmt: ws FOR ws '(' . ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 128
    epsilon  go to state 6


State 99

   37 dowhilestmt: ws DO ws '{' . ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 129
    epsilon  go to state 6


State 100

   28 ifstmt: ws IF ws . '(' ws expr ws ')' ws '{' ws code ws '}' ws

    '('  shift, and go to state 130


State 101

   45 sum1: ws NUMBER ws .

    $default  reduce using rule 45 (sum1)


State 102

   46 sum1: ws '(' ws . expr ws ')' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 132


State 103

   31 elseifstmt: ws . ELSE ws ifstmt ws elseifstmt ws
   32           | ws . epsilon ws

    ELSE  shift, and go to state 133

    ELSE      [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    epsilon  go to state 134


State 104

   27 ifelsestmt: ws ifstmt ws elseifstmt . ws elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 135
    epsilon  go to state 6


State 105

   43 exp2: ws . '-' ws sum1 ws exp2 ws

    '-'  shift, and go to state 136


State 106

    5 ws: epsilon .
   44 exp2: epsilon .

    '-'       reduce using rule 5 (ws)
    $default  reduce using rule 44 (exp2)


State 107

   42 expr: ws sum1 ws exp2 . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 137
    epsilon  go to state 6


State 108

   16 stmts: ws declaration ws ';' ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 138


State 109

    8 estmt: ws '=' . ws expr ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 139
    epsilon  go to state 6


State 110

   15 initialisation: declaration ws estmt ws .

    $default  reduce using rule 15 (initialisation)


State 111

   17 stmts: ws initialisation ws stmts ws .

    $default  reduce using rule 17 (stmts)


State 112

   24 stmts: ws assignment ws ';' ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 140


State 113

   18 stmts: ws ifelsestmt ws stmts ws .

    $default  reduce using rule 18 (stmts)


State 114

   19 stmts: ws whilestmt ws stmts ws .

    $default  reduce using rule 19 (stmts)


State 115

   20 stmts: ws dowhilestmt ws stmts ws .

    $default  reduce using rule 20 (stmts)


State 116

   21 stmts: ws forstmt ws stmts ws .

    $default  reduce using rule 21 (stmts)


State 117

   22 stmts: ws switchstmt ws stmts ws .

    $default  reduce using rule 22 (stmts)


State 118

   25 stmts: ws expr ws ';' ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 141


State 119

   26 assignment: ws IDENT ws '=' ws . expr ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 142


State 120

   36 whilestmt: ws WHILE ws '(' ws . expr ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 143


State 121

   39 switchstmt: ws SWITCH ws '(' ws . expr ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 144


State 122

    9 declaration: ws INT ws IDENT ws .

    $default  reduce using rule 9 (declaration)


State 123

   10 declaration: ws FLOAT ws IDENT ws .

    $default  reduce using rule 10 (declaration)


State 124

   14 declaration: ws DOUBLE ws IDENT ws .

    $default  reduce using rule 14 (declaration)


State 125

   12 declaration: ws LONG ws IDENT ws .

    $default  reduce using rule 12 (declaration)


State 126

   13 declaration: ws SHORT ws IDENT ws .

    $default  reduce using rule 13 (declaration)


State 127

   11 declaration: ws CHAR ws IDENT ws .

    $default  reduce using rule 11 (declaration)


State 128

   38 forstmt: ws FOR ws '(' ws . assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws          go to state 145
    epsilon     go to state 6
    assignment  go to state 146


State 129

   37 dowhilestmt: ws DO ws '{' ws . loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 147
    code      go to state 148
    epsilon   go to state 6
    loopcode  go to state 149


State 130

   28 ifstmt: ws IF ws '(' . ws expr ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 150
    epsilon  go to state 6


State 131

   42 expr: ws . sum1 ws exp2 ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 151
    epsilon  go to state 6
    sum1     go to state 49


State 132

   46 sum1: ws '(' ws expr . ws ')' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 152
    epsilon  go to state 6


State 133

   31 elseifstmt: ws ELSE . ws ifstmt ws elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 153
    epsilon  go to state 6


State 134

   32 elseifstmt: ws epsilon . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 154
    epsilon  go to state 6


State 135

   27 ifelsestmt: ws ifstmt ws elseifstmt ws . elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 155
    epsilon   go to state 6
    elsestmt  go to state 156


State 136

   43 exp2: ws '-' . ws sum1 ws exp2 ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 157
    epsilon  go to state 6


State 137

   42 expr: ws sum1 ws exp2 ws .

    $default  reduce using rule 42 (expr)


State 138

   16 stmts: ws declaration ws ';' ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 158
    epsilon  go to state 6


State 139

    8 estmt: ws '=' ws . expr ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 159


State 140

   24 stmts: ws assignment ws ';' ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 160
    epsilon  go to state 6


State 141

   25 stmts: ws expr ws ';' ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 161
    epsilon  go to state 6


State 142

   26 assignment: ws IDENT ws '=' ws expr . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 162
    epsilon  go to state 6


State 143

   36 whilestmt: ws WHILE ws '(' ws expr . ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 163
    epsilon  go to state 6


State 144

   39 switchstmt: ws SWITCH ws '(' ws expr . ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 164
    epsilon  go to state 6


State 145

   26 assignment: ws . IDENT ws '=' ws expr ws

    IDENT  shift, and go to state 36


State 146

   38 forstmt: ws FOR ws '(' ws assignment . ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 165
    epsilon  go to state 6


State 147

    6 code: ws . stmts ws
   33 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   34         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 166
    code      go to state 148
    epsilon   go to state 6
    stmts     go to state 21
    loopcode  go to state 167


State 148

   35 loopcode: code .

    $default  reduce using rule 35 (loopcode)


State 149

   37 dowhilestmt: ws DO ws '{' ws loopcode . ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 168
    epsilon  go to state 6


State 150

   28 ifstmt: ws IF ws '(' ws . expr ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 169


State 151

   45 sum1: ws . NUMBER ws
   46     | ws . '(' ws expr ws ')' ws

    NUMBER  shift, and go to state 73
    '('     shift, and go to state 74


State 152

   46 sum1: ws '(' ws expr ws . ')' ws

    ')'  shift, and go to state 170


State 153

   31 elseifstmt: ws ELSE ws . ifstmt ws elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 171
    epsilon  go to state 6
    ifstmt   go to state 172


State 154

   32 elseifstmt: ws epsilon ws .

    $default  reduce using rule 32 (elseifstmt)


State 155

   29 elsestmt: ws . ELSE ws '(' ws ')' ws '{' ws code ws '}' ws
   30         | ws . epsilon ws

    ELSE  shift, and go to state 173

    $default  reduce using rule 7 (epsilon)

    epsilon  go to state 174


State 156

   27 ifelsestmt: ws ifstmt ws elseifstmt ws elsestmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 175
    epsilon  go to state 6


State 157

   43 exp2: ws '-' ws . sum1 ws exp2 ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 151
    epsilon  go to state 6
    sum1     go to state 176


State 158

   16 stmts: ws declaration ws ';' ws stmts ws .

    $default  reduce using rule 16 (stmts)


State 159

    8 estmt: ws '=' ws expr . ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 177
    epsilon  go to state 6


State 160

   24 stmts: ws assignment ws ';' ws stmts ws .

    $default  reduce using rule 24 (stmts)


State 161

   25 stmts: ws expr ws ';' ws stmts ws .

    $default  reduce using rule 25 (stmts)


State 162

   26 assignment: ws IDENT ws '=' ws expr ws .

    $default  reduce using rule 26 (assignment)


State 163

   36 whilestmt: ws WHILE ws '(' ws expr ws . ')' ws '{' ws loopcode ws '}' ws

    ')'  shift, and go to state 178


State 164

   39 switchstmt: ws SWITCH ws '(' ws expr ws . ')' ws '{' ws casestmt ws '}' ws

    ')'  shift, and go to state 179


State 165

   38 forstmt: ws FOR ws '(' ws assignment ws . ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    ';'  shift, and go to state 180


State 166

    6 code: ws . stmts ws
   16 stmts: ws . declaration ws ';' ws stmts ws
   17      | ws . initialisation ws stmts ws
   18      | ws . ifelsestmt ws stmts ws
   19      | ws . whilestmt ws stmts ws
   20      | ws . dowhilestmt ws stmts ws
   21      | ws . forstmt ws stmts ws
   22      | ws . switchstmt ws stmts ws
   23      | ws . epsilon ws
   24      | ws . assignment ws ';' ws stmts ws
   25      | ws . expr ws ';' ws stmts ws
   33 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   34         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 181
    code            go to state 148
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    stmts           go to state 21
    assignment      go to state 27
    ifelsestmt      go to state 28
    loopcode        go to state 167
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32
    expr            go to state 33


State 167

   33 loopcode: ws loopcode . ws BREAK ws ';' ws loopcode ws
   34         | ws loopcode . ws CONTINUE ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 182
    epsilon  go to state 6


State 168

   37 dowhilestmt: ws DO ws '{' ws loopcode ws . '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '}'  shift, and go to state 183


State 169

   28 ifstmt: ws IF ws '(' ws expr . ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 184
    epsilon  go to state 6


State 170

   46 sum1: ws '(' ws expr ws ')' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 185
    epsilon  go to state 6


State 171

   28 ifstmt: ws . IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws

    IF  shift, and go to state 72


State 172

   31 elseifstmt: ws ELSE ws ifstmt . ws elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 186
    epsilon  go to state 6


State 173

   29 elsestmt: ws ELSE . ws '(' ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 187
    epsilon  go to state 6


State 174

   30 elsestmt: ws epsilon . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 188
    epsilon  go to state 6


State 175

   27 ifelsestmt: ws ifstmt ws elseifstmt ws elsestmt ws .

    $default  reduce using rule 27 (ifelsestmt)


State 176

   43 exp2: ws '-' ws sum1 . ws exp2 ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 189
    epsilon  go to state 6


State 177

    8 estmt: ws '=' ws expr ws . ';' ws

    ';'  shift, and go to state 190


State 178

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' . ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 191
    epsilon  go to state 6


State 179

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' . ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 192
    epsilon  go to state 6


State 180

   38 forstmt: ws FOR ws '(' ws assignment ws ';' . ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 193
    epsilon  go to state 6


State 181

    6 code: ws . stmts ws
    9 declaration: ws . INT ws IDENT ws
   10            | ws . FLOAT ws IDENT ws
   11            | ws . CHAR ws IDENT ws
   12            | ws . LONG ws IDENT ws
   13            | ws . SHORT ws IDENT ws
   14            | ws . DOUBLE ws IDENT ws
   16 stmts: ws . declaration ws ';' ws stmts ws
   17      | ws . initialisation ws stmts ws
   18      | ws . ifelsestmt ws stmts ws
   19      | ws . whilestmt ws stmts ws
   20      | ws . dowhilestmt ws stmts ws
   21      | ws . forstmt ws stmts ws
   22      | ws . switchstmt ws stmts ws
   23      | ws . epsilon ws
   24      | ws . assignment ws ';' ws stmts ws
   25      | ws . expr ws ';' ws stmts ws
   26 assignment: ws . IDENT ws '=' ws expr ws
   27 ifelsestmt: ws . ifstmt ws elseifstmt ws elsestmt ws
   33 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   34         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws
   36 whilestmt: ws . WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws
   37 dowhilestmt: ws . DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws
   38 forstmt: ws . FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws
   39 switchstmt: ws . SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws
   42 expr: ws . sum1 ws exp2 ws

    IDENT   shift, and go to state 36
    WHILE   shift, and go to state 37
    SWITCH  shift, and go to state 38
    INT     shift, and go to state 39
    FLOAT   shift, and go to state 40
    DOUBLE  shift, and go to state 41
    LONG    shift, and go to state 42
    SHORT   shift, and go to state 43
    CHAR    shift, and go to state 44
    FOR     shift, and go to state 45
    DO      shift, and go to state 46
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT     [reduce using rule 7 (epsilon)]
    WHILE     [reduce using rule 7 (epsilon)]
    SWITCH    [reduce using rule 7 (epsilon)]
    INT       [reduce using rule 7 (epsilon)]
    FLOAT     [reduce using rule 7 (epsilon)]
    DOUBLE    [reduce using rule 7 (epsilon)]
    LONG      [reduce using rule 7 (epsilon)]
    SHORT     [reduce using rule 7 (epsilon)]
    CHAR      [reduce using rule 7 (epsilon)]
    FOR       [reduce using rule 7 (epsilon)]
    DO        [reduce using rule 7 (epsilon)]
    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 194
    code            go to state 148
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    stmts           go to state 21
    assignment      go to state 27
    ifelsestmt      go to state 28
    ifstmt          go to state 48
    loopcode        go to state 167
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32
    expr            go to state 33
    sum1            go to state 49


State 182

   33 loopcode: ws loopcode ws . BREAK ws ';' ws loopcode ws
   34         | ws loopcode ws . CONTINUE ws ';' ws loopcode ws

    BREAK     shift, and go to state 195
    CONTINUE  shift, and go to state 196


State 183

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' . ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 197
    epsilon  go to state 6


State 184

   28 ifstmt: ws IF ws '(' ws expr ws . ')' ws '{' ws code ws '}' ws

    ')'  shift, and go to state 198


State 185

   46 sum1: ws '(' ws expr ws ')' ws .

    $default  reduce using rule 46 (sum1)


State 186

   31 elseifstmt: ws ELSE ws ifstmt ws . elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws          go to state 103
    epsilon     go to state 6
    elseifstmt  go to state 199


State 187

   29 elsestmt: ws ELSE ws . '(' ws ')' ws '{' ws code ws '}' ws

    '('  shift, and go to state 200


State 188

   30 elsestmt: ws epsilon ws .

    $default  reduce using rule 30 (elsestmt)


State 189

   43 exp2: ws '-' ws sum1 ws . exp2 ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 105
    epsilon  go to state 106
    exp2     go to state 201


State 190

    8 estmt: ws '=' ws expr ws ';' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 202
    epsilon  go to state 6


State 191

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws . '{' ws loopcode ws '}' ws

    '{'  shift, and go to state 203


State 192

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws . '{' ws casestmt ws '}' ws

    '{'  shift, and go to state 204


State 193

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws . expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 205


State 194

    6 code: ws . stmts ws
    9 declaration: ws . INT ws IDENT ws
   10            | ws . FLOAT ws IDENT ws
   11            | ws . CHAR ws IDENT ws
   12            | ws . LONG ws IDENT ws
   13            | ws . SHORT ws IDENT ws
   14            | ws . DOUBLE ws IDENT ws
   16 stmts: ws . declaration ws ';' ws stmts ws
   17      | ws . initialisation ws stmts ws
   18      | ws . ifelsestmt ws stmts ws
   19      | ws . whilestmt ws stmts ws
   20      | ws . dowhilestmt ws stmts ws
   21      | ws . forstmt ws stmts ws
   22      | ws . switchstmt ws stmts ws
   23      | ws . epsilon ws
   24      | ws . assignment ws ';' ws stmts ws
   25      | ws . expr ws ';' ws stmts ws
   26 assignment: ws . IDENT ws '=' ws expr ws
   27 ifelsestmt: ws . ifstmt ws elseifstmt ws elsestmt ws
   28 ifstmt: ws . IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws
   33 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   34         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws
   36 whilestmt: ws . WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws
   37 dowhilestmt: ws . DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws
   38 forstmt: ws . FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws
   39 switchstmt: ws . SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws
   42 expr: ws . sum1 ws exp2 ws
   45 sum1: ws . NUMBER ws
   46     | ws . '(' ws expr ws ')' ws

    IDENT   shift, and go to state 36
    IF      shift, and go to state 72
    WHILE   shift, and go to state 37
    SWITCH  shift, and go to state 38
    INT     shift, and go to state 39
    FLOAT   shift, and go to state 40
    DOUBLE  shift, and go to state 41
    LONG    shift, and go to state 42
    SHORT   shift, and go to state 43
    CHAR    shift, and go to state 44
    FOR     shift, and go to state 45
    DO      shift, and go to state 46
    NUMBER  shift, and go to state 73
    '('     shift, and go to state 74
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT     [reduce using rule 7 (epsilon)]
    IF        [reduce using rule 7 (epsilon)]
    WHILE     [reduce using rule 7 (epsilon)]
    SWITCH    [reduce using rule 7 (epsilon)]
    INT       [reduce using rule 7 (epsilon)]
    FLOAT     [reduce using rule 7 (epsilon)]
    DOUBLE    [reduce using rule 7 (epsilon)]
    LONG      [reduce using rule 7 (epsilon)]
    SHORT     [reduce using rule 7 (epsilon)]
    CHAR      [reduce using rule 7 (epsilon)]
    FOR       [reduce using rule 7 (epsilon)]
    DO        [reduce using rule 7 (epsilon)]
    NUMBER    [reduce using rule 7 (epsilon)]
    '('       [reduce using rule 7 (epsilon)]
    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 194
    code            go to state 148
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    stmts           go to state 21
    assignment      go to state 27
    ifelsestmt      go to state 28
    ifstmt          go to state 48
    loopcode        go to state 167
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32
    expr            go to state 33
    sum1            go to state 49


State 195

   33 loopcode: ws loopcode ws BREAK . ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 206
    epsilon  go to state 6


State 196

   34 loopcode: ws loopcode ws CONTINUE . ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 207
    epsilon  go to state 6


State 197

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws . WHILE ws '(' ws expr ws ')' ws ';' ws

    WHILE  shift, and go to state 208


State 198

   28 ifstmt: ws IF ws '(' ws expr ws ')' . ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 209
    epsilon  go to state 6


State 199

   31 elseifstmt: ws ELSE ws ifstmt ws elseifstmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 210
    epsilon  go to state 6


State 200

   29 elsestmt: ws ELSE ws '(' . ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 211
    epsilon  go to state 6


State 201

   43 exp2: ws '-' ws sum1 ws exp2 . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 212
    epsilon  go to state 6


State 202

    8 estmt: ws '=' ws expr ws ';' ws .

    $default  reduce using rule 8 (estmt)


State 203

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' . ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 213
    epsilon  go to state 6


State 204

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' . ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 214
    epsilon  go to state 6


State 205

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr . ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 215
    epsilon  go to state 6


State 206

   33 loopcode: ws loopcode ws BREAK ws . ';' ws loopcode ws

    ';'  shift, and go to state 216


State 207

   34 loopcode: ws loopcode ws CONTINUE ws . ';' ws loopcode ws

    ';'  shift, and go to state 217


State 208

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE . ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 218
    epsilon  go to state 6


State 209

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws . '{' ws code ws '}' ws

    '{'  shift, and go to state 219


State 210

   31 elseifstmt: ws ELSE ws ifstmt ws elseifstmt ws .

    $default  reduce using rule 31 (elseifstmt)


State 211

   29 elsestmt: ws ELSE ws '(' ws . ')' ws '{' ws code ws '}' ws

    ')'  shift, and go to state 220


State 212

   43 exp2: ws '-' ws sum1 ws exp2 ws .

    $default  reduce using rule 43 (exp2)


State 213

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws . loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 147
    code      go to state 148
    epsilon   go to state 6
    loopcode  go to state 221


State 214

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws . casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 222
    epsilon   go to state 223
    casestmt  go to state 224


State 215

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws . ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    ';'  shift, and go to state 225


State 216

   33 loopcode: ws loopcode ws BREAK ws ';' . ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 226
    epsilon  go to state 6


State 217

   34 loopcode: ws loopcode ws CONTINUE ws ';' . ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 227
    epsilon  go to state 6


State 218

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws . '(' ws expr ws ')' ws ';' ws

    '('  shift, and go to state 228


State 219

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' . ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 229
    epsilon  go to state 6


State 220

   29 elsestmt: ws ELSE ws '(' ws ')' . ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 230
    epsilon  go to state 6


State 221

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 231
    epsilon  go to state 6


State 222

   40 casestmt: ws . CASE ws expr ws ':' ws code ws casestmt ws

    CASE  shift, and go to state 232


State 223

    5 ws: epsilon .
   41 casestmt: epsilon .

    CASE      reduce using rule 5 (ws)
    $default  reduce using rule 41 (casestmt)


State 224

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 233
    epsilon  go to state 6


State 225

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' . ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 234
    epsilon  go to state 6


State 226

   33 loopcode: ws loopcode ws BREAK ws ';' ws . loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 147
    code      go to state 148
    epsilon   go to state 6
    loopcode  go to state 235


State 227

   34 loopcode: ws loopcode ws CONTINUE ws ';' ws . loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 147
    code      go to state 148
    epsilon   go to state 6
    loopcode  go to state 236


State 228

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' . ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 237
    epsilon  go to state 6


State 229

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws . code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 238
    epsilon  go to state 6


State 230

   29 elsestmt: ws ELSE ws '(' ws ')' ws . '{' ws code ws '}' ws

    '{'  shift, and go to state 239


State 231

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws . '}' ws

    '}'  shift, and go to state 240


State 232

   40 casestmt: ws CASE . ws expr ws ':' ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 241
    epsilon  go to state 6


State 233

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws . '}' ws

    '}'  shift, and go to state 242


State 234

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws . assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws          go to state 145
    epsilon     go to state 6
    assignment  go to state 243


State 235

   33 loopcode: ws loopcode ws BREAK ws ';' ws loopcode . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 244
    epsilon  go to state 6


State 236

   34 loopcode: ws loopcode ws CONTINUE ws ';' ws loopcode . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 245
    epsilon  go to state 6


State 237

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws . expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 246


State 238

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 247
    epsilon  go to state 6


State 239

   29 elsestmt: ws ELSE ws '(' ws ')' ws '{' . ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 248
    epsilon  go to state 6


State 240

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 249
    epsilon  go to state 6


State 241

   40 casestmt: ws CASE ws . expr ws ':' ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 131
    epsilon  go to state 6
    expr     go to state 250


State 242

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 251
    epsilon  go to state 6


State 243

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment . ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 252
    epsilon  go to state 6


State 244

   33 loopcode: ws loopcode ws BREAK ws ';' ws loopcode ws .

    $default  reduce using rule 33 (loopcode)


State 245

   34 loopcode: ws loopcode ws CONTINUE ws ';' ws loopcode ws .

    $default  reduce using rule 34 (loopcode)


State 246

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr . ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 253
    epsilon  go to state 6


State 247

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws . '}' ws

    '}'  shift, and go to state 254


State 248

   29 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws . code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 255
    epsilon  go to state 6


State 249

   36 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws .

    $default  reduce using rule 36 (whilestmt)


State 250

   40 casestmt: ws CASE ws expr . ws ':' ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 256
    epsilon  go to state 6


State 251

   39 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws .

    $default  reduce using rule 39 (switchstmt)


State 252

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws . ')' ws '{' ws loopcode ws '}' ws

    ')'  shift, and go to state 257


State 253

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws . ')' ws ';' ws

    ')'  shift, and go to state 258


State 254

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 259
    epsilon  go to state 6


State 255

   29 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 260
    epsilon  go to state 6


State 256

   40 casestmt: ws CASE ws expr ws . ':' ws code ws casestmt ws

    ':'  shift, and go to state 261


State 257

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' . ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 262
    epsilon  go to state 6


State 258

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' . ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 263
    epsilon  go to state 6


State 259

   28 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws .

    $default  reduce using rule 28 (ifstmt)


State 260

   29 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws . '}' ws

    '}'  shift, and go to state 264


State 261

   40 casestmt: ws CASE ws expr ws ':' . ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 265
    epsilon  go to state 6


State 262

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws . '{' ws loopcode ws '}' ws

    '{'  shift, and go to state 266


State 263

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws . ';' ws

    ';'  shift, and go to state 267


State 264

   29 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 268
    epsilon  go to state 6


State 265

   40 casestmt: ws CASE ws expr ws ':' ws . code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 269
    epsilon  go to state 6


State 266

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' . ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 270
    epsilon  go to state 6


State 267

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 271
    epsilon  go to state 6


State 268

   29 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws '}' ws .

    $default  reduce using rule 29 (elsestmt)


State 269

   40 casestmt: ws CASE ws expr ws ':' ws code . ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 272
    epsilon  go to state 6


State 270

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws . loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 147
    code      go to state 148
    epsilon   go to state 6
    loopcode  go to state 273


State 271

   37 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws .

    $default  reduce using rule 37 (dowhilestmt)


State 272

   40 casestmt: ws CASE ws expr ws ':' ws code ws . casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 222
    epsilon   go to state 223
    casestmt  go to state 274


State 273

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 275
    epsilon  go to state 6


State 274

   40 casestmt: ws CASE ws expr ws ':' ws code ws casestmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 276
    epsilon  go to state 6


State 275

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws . '}' ws

    '}'  shift, and go to state 277


State 276

   40 casestmt: ws CASE ws expr ws ':' ws code ws casestmt ws .

    $default  reduce using rule 40 (casestmt)


State 277

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 278
    epsilon  go to state 6


State 278

   38 forstmt: ws FOR ws '(' ws assignment ws ';' ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws .

    $default  reduce using rule 38 (forstmt)
