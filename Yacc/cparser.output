Rules useless in parser due to conflicts

   36 initialisation: epsilon


State 16 conflicts: 3 shift/reduce
State 17 conflicts: 3 shift/reduce
State 18 conflicts: 3 shift/reduce
State 20 conflicts: 3 shift/reduce
State 21 conflicts: 3 shift/reduce
State 24 conflicts: 3 shift/reduce, 19 reduce/reduce
State 25 conflicts: 3 shift/reduce
State 26 conflicts: 3 shift/reduce
State 28 conflicts: 3 shift/reduce
State 29 conflicts: 3 shift/reduce
State 30 conflicts: 3 shift/reduce
State 31 conflicts: 3 shift/reduce
State 32 conflicts: 3 shift/reduce
State 47 conflicts: 3 shift/reduce
State 49 conflicts: 3 shift/reduce
State 50 conflicts: 3 shift/reduce
State 52 conflicts: 3 shift/reduce
State 53 conflicts: 3 shift/reduce
State 54 conflicts: 3 shift/reduce
State 55 conflicts: 3 shift/reduce
State 56 conflicts: 3 shift/reduce
State 70 conflicts: 3 shift/reduce
State 71 conflicts: 3 shift/reduce
State 72 conflicts: 3 shift/reduce
State 73 conflicts: 3 shift/reduce
State 74 conflicts: 3 shift/reduce
State 75 conflicts: 3 shift/reduce
State 76 conflicts: 3 shift/reduce
State 77 conflicts: 3 shift/reduce
State 78 conflicts: 3 shift/reduce
State 79 conflicts: 3 shift/reduce
State 80 conflicts: 3 shift/reduce
State 82 conflicts: 3 shift/reduce
State 83 conflicts: 3 shift/reduce
State 84 conflicts: 3 shift/reduce
State 85 conflicts: 3 shift/reduce
State 86 conflicts: 3 shift/reduce
State 87 conflicts: 3 shift/reduce
State 88 conflicts: 3 shift/reduce
State 89 conflicts: 3 shift/reduce
State 90 conflicts: 3 shift/reduce
State 91 conflicts: 3 shift/reduce
State 92 conflicts: 3 shift/reduce
State 94 conflicts: 1 shift/reduce
State 95 conflicts: 3 shift/reduce
State 96 conflicts: 3 shift/reduce
State 97 conflicts: 3 shift/reduce
State 98 conflicts: 3 shift/reduce
State 108 conflicts: 3 shift/reduce
State 109 conflicts: 3 shift/reduce
State 110 conflicts: 3 shift/reduce
State 118 conflicts: 3 shift/reduce
State 119 conflicts: 3 shift/reduce
State 120 conflicts: 3 shift/reduce
State 121 conflicts: 3 shift/reduce
State 122 conflicts: 3 shift/reduce
State 123 conflicts: 3 shift/reduce
State 124 conflicts: 3 shift/reduce
State 125 conflicts: 3 shift/reduce
State 127 conflicts: 3 shift/reduce
State 129 conflicts: 3 shift/reduce
State 134 conflicts: 3 shift/reduce
State 137 conflicts: 3 shift/reduce
State 141 conflicts: 3 shift/reduce
State 144 conflicts: 3 shift/reduce
State 145 conflicts: 3 shift/reduce
State 146 conflicts: 3 shift/reduce
State 149 conflicts: 3 shift/reduce
State 154 conflicts: 3 shift/reduce
State 158 conflicts: 3 shift/reduce
State 160 conflicts: 3 shift/reduce
State 163 conflicts: 3 shift/reduce
State 164 conflicts: 3 shift/reduce
State 165 conflicts: 3 shift/reduce
State 168 conflicts: 3 shift/reduce
State 169 conflicts: 3 shift/reduce
State 173 conflicts: 14 shift/reduce
State 177 conflicts: 3 shift/reduce
State 180 conflicts: 3 shift/reduce
State 181 conflicts: 3 shift/reduce
State 182 conflicts: 3 shift/reduce
State 183 conflicts: 3 shift/reduce
State 186 conflicts: 3 shift/reduce
State 187 conflicts: 3 shift/reduce
State 188 conflicts: 3 shift/reduce
State 189 conflicts: 3 shift/reduce
State 193 conflicts: 15 shift/reduce
State 198 conflicts: 3 shift/reduce
State 201 conflicts: 3 shift/reduce
State 202 conflicts: 3 shift/reduce
State 203 conflicts: 3 shift/reduce
State 206 conflicts: 3 shift/reduce
State 207 conflicts: 3 shift/reduce
State 208 conflicts: 3 shift/reduce
State 209 conflicts: 3 shift/reduce
State 212 conflicts: 3 shift/reduce
State 213 conflicts: 3 shift/reduce
State 221 conflicts: 3 shift/reduce
State 222 conflicts: 3 shift/reduce
State 223 conflicts: 3 shift/reduce
State 226 conflicts: 3 shift/reduce
State 227 conflicts: 3 shift/reduce
State 228 conflicts: 3 shift/reduce
State 229 conflicts: 3 shift/reduce
State 230 conflicts: 3 shift/reduce
State 234 conflicts: 3 shift/reduce
State 235 conflicts: 3 shift/reduce
State 237 conflicts: 3 shift/reduce
State 238 conflicts: 3 shift/reduce
State 240 conflicts: 3 shift/reduce
State 242 conflicts: 6 shift/reduce
State 243 conflicts: 3 shift/reduce
State 244 conflicts: 3 shift/reduce
State 247 conflicts: 3 shift/reduce
State 248 conflicts: 3 shift/reduce
State 249 conflicts: 3 shift/reduce
State 250 conflicts: 3 shift/reduce
State 251 conflicts: 3 shift/reduce
State 254 conflicts: 3 shift/reduce
State 256 conflicts: 3 shift/reduce
State 264 conflicts: 3 shift/reduce
State 265 conflicts: 3 shift/reduce
State 266 conflicts: 3 shift/reduce
State 267 conflicts: 3 shift/reduce
State 268 conflicts: 3 shift/reduce
State 270 conflicts: 3 shift/reduce
State 271 conflicts: 3 shift/reduce
State 272 conflicts: 3 shift/reduce
State 275 conflicts: 3 shift/reduce
State 276 conflicts: 3 shift/reduce
State 277 conflicts: 3 shift/reduce
State 278 conflicts: 3 shift/reduce
State 279 conflicts: 3 shift/reduce
State 282 conflicts: 3 shift/reduce
State 284 conflicts: 3 shift/reduce
State 285 conflicts: 3 shift/reduce, 4 reduce/reduce
State 287 conflicts: 3 shift/reduce
State 289 conflicts: 3 shift/reduce
State 290 conflicts: 3 shift/reduce
State 291 conflicts: 3 shift/reduce
State 292 conflicts: 3 shift/reduce
State 294 conflicts: 3 shift/reduce
State 297 conflicts: 3 shift/reduce
State 298 conflicts: 3 shift/reduce
State 299 conflicts: 3 shift/reduce
State 300 conflicts: 3 shift/reduce
State 301 conflicts: 3 shift/reduce
State 302 conflicts: 3 shift/reduce
State 305 conflicts: 3 shift/reduce
State 307 conflicts: 3 shift/reduce
State 308 conflicts: 3 shift/reduce
State 309 conflicts: 3 shift/reduce
State 310 conflicts: 3 shift/reduce
State 311 conflicts: 3 shift/reduce
State 312 conflicts: 3 shift/reduce
State 318 conflicts: 3 shift/reduce
State 321 conflicts: 3 shift/reduce
State 322 conflicts: 3 shift/reduce
State 323 conflicts: 3 shift/reduce
State 326 conflicts: 3 shift/reduce
State 328 conflicts: 3 shift/reduce
State 329 conflicts: 3 shift/reduce
State 330 conflicts: 3 shift/reduce
State 337 conflicts: 3 shift/reduce
State 341 conflicts: 3 shift/reduce
State 342 conflicts: 6 shift/reduce
State 345 conflicts: 6 shift/reduce
State 347 conflicts: 6 shift/reduce
State 348 conflicts: 6 shift/reduce
State 349 conflicts: 6 shift/reduce
State 350 conflicts: 6 shift/reduce
State 352 conflicts: 3 shift/reduce
State 356 conflicts: 3 shift/reduce
State 359 conflicts: 3 shift/reduce
State 362 conflicts: 3 shift/reduce
State 364 conflicts: 3 shift/reduce
State 366 conflicts: 3 shift/reduce
State 368 conflicts: 3 shift/reduce
State 371 conflicts: 3 shift/reduce
State 373 conflicts: 3 shift/reduce
State 376 conflicts: 3 shift/reduce
State 377 conflicts: 3 shift/reduce
State 380 conflicts: 3 shift/reduce


Grammar

    0 $accept: mainstmt $end

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    2 ws: '\n'
    3   | '\t'
    4   | ' '
    5   | epsilon

    6 code: ws stmts ws

    7 epsilon: /* empty */

    8 stmt: ws expr ws ';' ws
    9     | ws expr ws ';' ws stmt ws

   10 estmt: ws '=' ws expr ws ';' ws
   11      | ws expr ws ';' ws stmt ws

   12 expr: ws expr ws '-' ws sum ws
   13     | ws sum ws

   14 sum: ws sum ws '+' ws product ws
   15    | ws product ws

   16 product: ws product ws '*' ws fraction ws
   17        | ws fraction ws

   18 fraction: ws fraction ws '/' ws lessthan ws
   19         | ws lessthan ws

   20 lessthan: ws lessthan ws '<' ws equals ws
   21         | ws equals ws

   22 equals: ws equals ws EQUALSCHECK ws greaterthan ws
   23       | ws greaterthan ws

   24 greaterthan: ws greaterthan ws '>' ws factor ws
   25            | ws factor ws

   26 factor: ws NUMBER ws
   27       | ws '(' ws expr ws ')' ws
   28       | ws IDENT ws

   29 declaration: ws INT ws IDENT ws
   30            | ws FLOAT ws IDENT ws
   31            | ws CHAR ws IDENT ws
   32            | ws LONG ws IDENT ws
   33            | ws SHORT ws IDENT ws
   34            | ws DOUBLE ws IDENT ws

   35 initialisation: declaration ws estmt ws
   36               | epsilon

   37 stmts: ws declaration ws ';' ws stmts ws
   38      | ws initialisation ws stmts ws
   39      | ws ifelsestmt ws stmts ws
   40      | ws whilestmt ws stmts ws
   41      | ws dowhilestmt ws stmts ws
   42      | ws forstmt ws stmts ws
   43      | ws switchstmt ws stmts ws
   44      | ws epsilon ws
   45      | ws assignment ws ';' ws

   46 assignment: ws IDENT ws '=' ws expr ws

   47 ifelsestmt: ws ifstmt ws elseifstmt ws elsestmt ws

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws

   49 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws '}' ws
   50         | ws epsilon ws

   51 elseifstmt: ws ELSE ws ifstmt ws elseifstmt ws
   52           | ws epsilon ws

   53 loopcode: ws loopcode ws BREAK ws ';' ws loopcode ws
   54         | ws loopcode ws CONTINUE ws ';' ws loopcode ws
   55         | code

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

   60 casestmt: ws CASE ws expr ws ':' ws code ws casestmt ws
   61         | epsilon

   62 condition: '<'
   63          | '>'
   64          | EQUALSCHECK


Terminals, with rules where they appear

$end (0) 0
'\t' (9) 3
'\n' (10) 2
' ' (32) 4
'(' (40) 1 27 48 49 56 57 58 59
')' (41) 1 27 48 49 56 57 58 59
'*' (42) 16
'+' (43) 14
'-' (45) 12
'/' (47) 18
':' (58) 60
';' (59) 8 9 10 11 37 45 53 54 57 58
'<' (60) 20 62
'=' (61) 10 46
'>' (62) 24 63
'{' (123) 1 48 49 56 57 58 59
'}' (125) 1 48 49 56 57 58 59
error (256)
IDENT (258) 28 29 30 31 32 33 34 46 58
IF (259) 48
TMAIN (260) 1
ELSE (261) 49 51
WHILE (262) 56 57
SWITCH (263) 59
CASE (264) 60
INT (265) 1 29
FLOAT (266) 30
DOUBLE (267) 34
LONG (268) 32
SHORT (269) 33
CHAR (270) 31
FOR (271) 58
DO (272) 57
BREAK (273) 53
CONTINUE (274) 54
EQUALSCHECK (275) 22 64
NUMBER (276) 26
END (277) 1


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
mainstmt (40)
    on left: 1, on right: 0
ws (41)
    on left: 2 3 4 5, on right: 1 6 8 9 10 11 12 13 14 15 16 17 18
    19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 37 38 39 40
    41 42 43 44 45 46 47 48 49 50 51 52 53 54 56 57 58 59 60
code (42)
    on left: 6, on right: 1 48 49 55 60
epsilon (43)
    on left: 7, on right: 5 36 44 50 52 61
stmt (44)
    on left: 8 9, on right: 9 11
estmt (45)
    on left: 10 11, on right: 35
expr (46)
    on left: 12 13, on right: 8 9 10 11 12 27 46 48 56 57 58 59 60
sum (47)
    on left: 14 15, on right: 12 13 14
product (48)
    on left: 16 17, on right: 14 15 16
fraction (49)
    on left: 18 19, on right: 16 17 18
lessthan (50)
    on left: 20 21, on right: 18 19 20
equals (51)
    on left: 22 23, on right: 20 21 22
greaterthan (52)
    on left: 24 25, on right: 22 23 24
factor (53)
    on left: 26 27 28, on right: 24 25
declaration (54)
    on left: 29 30 31 32 33 34, on right: 35 37
initialisation (55)
    on left: 35 36, on right: 38
stmts (56)
    on left: 37 38 39 40 41 42 43 44 45, on right: 6 37 38 39 40 41
    42 43
assignment (57)
    on left: 46, on right: 45 58
ifelsestmt (58)
    on left: 47, on right: 39
ifstmt (59)
    on left: 48, on right: 47 51
elsestmt (60)
    on left: 49 50, on right: 47
elseifstmt (61)
    on left: 51 52, on right: 47 51
loopcode (62)
    on left: 53 54 55, on right: 53 54 56 57 58
whilestmt (63)
    on left: 56, on right: 40
dowhilestmt (64)
    on left: 57, on right: 41
forstmt (65)
    on left: 58, on right: 42
switchstmt (66)
    on left: 59, on right: 43
casestmt (67)
    on left: 60 61, on right: 59 60
condition (68)
    on left: 62 63 64, on right: 58


State 0

    0 $accept: . mainstmt $end

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    mainstmt  go to state 4
    ws        go to state 5
    epsilon   go to state 6


State 1

    2 ws: '\n' .

    $default  reduce using rule 2 (ws)


State 2

    3 ws: '\t' .

    $default  reduce using rule 3 (ws)


State 3

    4 ws: ' ' .

    $default  reduce using rule 4 (ws)


State 4

    0 $accept: mainstmt . $end

    $end  shift, and go to state 7


State 5

    1 mainstmt: ws . INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    INT  shift, and go to state 8


State 6

    5 ws: epsilon .

    $default  reduce using rule 5 (ws)


State 7

    0 $accept: mainstmt $end .

    $default  accept


State 8

    1 mainstmt: ws INT . ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 9
    epsilon  go to state 6


State 9

    1 mainstmt: ws INT ws . TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END

    TMAIN  shift, and go to state 10


State 10

    1 mainstmt: ws INT ws TMAIN . ws '(' ws ')' ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 11
    epsilon  go to state 6


State 11

    1 mainstmt: ws INT ws TMAIN ws . '(' ws ')' ws '{' ws code ws '}' ws END

    '('  shift, and go to state 12


State 12

    1 mainstmt: ws INT ws TMAIN ws '(' . ws ')' ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 13
    epsilon  go to state 6


State 13

    1 mainstmt: ws INT ws TMAIN ws '(' ws . ')' ws '{' ws code ws '}' ws END

    ')'  shift, and go to state 14


State 14

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' . ws '{' ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 15
    epsilon  go to state 6


State 15

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws . '{' ws code ws '}' ws END

    '{'  shift, and go to state 16


State 16

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' . ws code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 17
    epsilon  go to state 6


State 17

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws . code ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 19
    epsilon  go to state 6


State 18

    6 code: ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 21


State 19

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code . ws '}' ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 22
    epsilon  go to state 6


State 20

   37 stmts: ws . declaration ws ';' ws stmts ws
   38      | ws . initialisation ws stmts ws
   39      | ws . ifelsestmt ws stmts ws
   40      | ws . whilestmt ws stmts ws
   41      | ws . dowhilestmt ws stmts ws
   42      | ws . forstmt ws stmts ws
   43      | ws . switchstmt ws stmts ws
   44      | ws . epsilon ws
   45      | ws . assignment ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 23
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    assignment      go to state 27
    ifelsestmt      go to state 28
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32


State 21

    6 code: ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 33
    epsilon  go to state 6


State 22

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws . '}' ws END

    '}'  shift, and go to state 34


State 23

   29 declaration: ws . INT ws IDENT ws
   30            | ws . FLOAT ws IDENT ws
   31            | ws . CHAR ws IDENT ws
   32            | ws . LONG ws IDENT ws
   33            | ws . SHORT ws IDENT ws
   34            | ws . DOUBLE ws IDENT ws
   46 assignment: ws . IDENT ws '=' ws expr ws
   47 ifelsestmt: ws . ifstmt ws elseifstmt ws elsestmt ws
   56 whilestmt: ws . WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws
   57 dowhilestmt: ws . DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws
   58 forstmt: ws . FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws
   59 switchstmt: ws . SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

    IDENT   shift, and go to state 35
    WHILE   shift, and go to state 36
    SWITCH  shift, and go to state 37
    INT     shift, and go to state 38
    FLOAT   shift, and go to state 39
    DOUBLE  shift, and go to state 40
    LONG    shift, and go to state 41
    SHORT   shift, and go to state 42
    CHAR    shift, and go to state 43
    FOR     shift, and go to state 44
    DO      shift, and go to state 45
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 46
    epsilon  go to state 6
    ifstmt   go to state 47


State 24

    5 ws: epsilon .
   36 initialisation: epsilon .
   44 stmts: ws epsilon . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    IDENT     reduce using rule 5 (ws)
    IDENT     [reduce using rule 36 (initialisation)]
    IF        reduce using rule 5 (ws)
    IF        [reduce using rule 36 (initialisation)]
    WHILE     reduce using rule 5 (ws)
    WHILE     [reduce using rule 36 (initialisation)]
    SWITCH    reduce using rule 5 (ws)
    SWITCH    [reduce using rule 36 (initialisation)]
    CASE      reduce using rule 7 (epsilon)
    CASE      [reduce using rule 36 (initialisation)]
    INT       reduce using rule 5 (ws)
    INT       [reduce using rule 36 (initialisation)]
    FLOAT     reduce using rule 5 (ws)
    FLOAT     [reduce using rule 36 (initialisation)]
    DOUBLE    reduce using rule 5 (ws)
    DOUBLE    [reduce using rule 36 (initialisation)]
    LONG      reduce using rule 5 (ws)
    LONG      [reduce using rule 36 (initialisation)]
    SHORT     reduce using rule 5 (ws)
    SHORT     [reduce using rule 36 (initialisation)]
    CHAR      reduce using rule 5 (ws)
    CHAR      [reduce using rule 36 (initialisation)]
    FOR       reduce using rule 5 (ws)
    FOR       [reduce using rule 36 (initialisation)]
    DO        reduce using rule 5 (ws)
    DO        [reduce using rule 36 (initialisation)]
    BREAK     reduce using rule 5 (ws)
    BREAK     [reduce using rule 7 (epsilon)]
    BREAK     [reduce using rule 36 (initialisation)]
    CONTINUE  reduce using rule 5 (ws)
    CONTINUE  [reduce using rule 7 (epsilon)]
    CONTINUE  [reduce using rule 36 (initialisation)]
    '}'       reduce using rule 7 (epsilon)
    '}'       [reduce using rule 36 (initialisation)]
    '\n'      [reduce using rule 5 (ws)]
    '\n'      [reduce using rule 7 (epsilon)]
    '\n'      [reduce using rule 36 (initialisation)]
    '\t'      [reduce using rule 5 (ws)]
    '\t'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 36 (initialisation)]
    ' '       [reduce using rule 5 (ws)]
    ' '       [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 36 (initialisation)]
    $default  reduce using rule 5 (ws)

    ws       go to state 48
    epsilon  go to state 6


State 25

   35 initialisation: declaration . ws estmt ws
   37 stmts: ws declaration . ws ';' ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 49
    epsilon  go to state 6


State 26

   38 stmts: ws initialisation . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 50
    epsilon  go to state 6


State 27

   45 stmts: ws assignment . ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 51
    epsilon  go to state 6


State 28

   39 stmts: ws ifelsestmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 52
    epsilon  go to state 6


State 29

   40 stmts: ws whilestmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 53
    epsilon  go to state 6


State 30

   41 stmts: ws dowhilestmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 54
    epsilon  go to state 6


State 31

   42 stmts: ws forstmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 55
    epsilon  go to state 6


State 32

   43 stmts: ws switchstmt . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 56
    epsilon  go to state 6


State 33

    6 code: ws stmts ws .

    $default  reduce using rule 6 (code)


State 34

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' . ws END

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 57
    epsilon  go to state 6


State 35

   46 assignment: ws IDENT . ws '=' ws expr ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 58
    epsilon  go to state 6


State 36

   56 whilestmt: ws WHILE . ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 59
    epsilon  go to state 6


State 37

   59 switchstmt: ws SWITCH . ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 60
    epsilon  go to state 6


State 38

   29 declaration: ws INT . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 61
    epsilon  go to state 6


State 39

   30 declaration: ws FLOAT . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 62
    epsilon  go to state 6


State 40

   34 declaration: ws DOUBLE . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 63
    epsilon  go to state 6


State 41

   32 declaration: ws LONG . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 64
    epsilon  go to state 6


State 42

   33 declaration: ws SHORT . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 65
    epsilon  go to state 6


State 43

   31 declaration: ws CHAR . ws IDENT ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 66
    epsilon  go to state 6


State 44

   58 forstmt: ws FOR . ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 67
    epsilon  go to state 6


State 45

   57 dowhilestmt: ws DO . ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 68
    epsilon  go to state 6


State 46

   48 ifstmt: ws . IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws

    IF  shift, and go to state 69


State 47

   47 ifelsestmt: ws ifstmt . ws elseifstmt ws elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 70
    epsilon  go to state 6


State 48

   44 stmts: ws epsilon ws .

    $default  reduce using rule 44 (stmts)


State 49

   35 initialisation: declaration ws . estmt ws
   37 stmts: ws declaration ws . ';' ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3
    ';'   shift, and go to state 71

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 72
    epsilon  go to state 6
    estmt    go to state 73


State 50

   38 stmts: ws initialisation ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 74


State 51

   45 stmts: ws assignment ws . ';' ws

    ';'  shift, and go to state 75


State 52

   39 stmts: ws ifelsestmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 76


State 53

   40 stmts: ws whilestmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 77


State 54

   41 stmts: ws dowhilestmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 78


State 55

   42 stmts: ws forstmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 79


State 56

   43 stmts: ws switchstmt ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 80


State 57

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws . END

    END  shift, and go to state 81


State 58

   46 assignment: ws IDENT ws . '=' ws expr ws

    '='  shift, and go to state 82


State 59

   56 whilestmt: ws WHILE ws . '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws

    '('  shift, and go to state 83


State 60

   59 switchstmt: ws SWITCH ws . '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

    '('  shift, and go to state 84


State 61

   29 declaration: ws INT ws . IDENT ws

    IDENT  shift, and go to state 85


State 62

   30 declaration: ws FLOAT ws . IDENT ws

    IDENT  shift, and go to state 86


State 63

   34 declaration: ws DOUBLE ws . IDENT ws

    IDENT  shift, and go to state 87


State 64

   32 declaration: ws LONG ws . IDENT ws

    IDENT  shift, and go to state 88


State 65

   33 declaration: ws SHORT ws . IDENT ws

    IDENT  shift, and go to state 89


State 66

   31 declaration: ws CHAR ws . IDENT ws

    IDENT  shift, and go to state 90


State 67

   58 forstmt: ws FOR ws . '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '('  shift, and go to state 91


State 68

   57 dowhilestmt: ws DO ws . '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '{'  shift, and go to state 92


State 69

   48 ifstmt: ws IF . ws '(' ws expr ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 93
    epsilon  go to state 6


State 70

   47 ifelsestmt: ws ifstmt ws . elseifstmt ws elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws          go to state 94
    epsilon     go to state 6
    elseifstmt  go to state 95


State 71

   37 stmts: ws declaration ws ';' . ws stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 96
    epsilon  go to state 6


State 72

   10 estmt: ws . '=' ws expr ws ';' ws
   11      | ws . expr ws ';' ws stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3
    '='   shift, and go to state 97

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 99


State 73

   35 initialisation: declaration ws estmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 100
    epsilon  go to state 6


State 74

   38 stmts: ws initialisation ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 101
    epsilon  go to state 6


State 75

   45 stmts: ws assignment ws ';' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 102
    epsilon  go to state 6


State 76

   39 stmts: ws ifelsestmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 103
    epsilon  go to state 6


State 77

   40 stmts: ws whilestmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 104
    epsilon  go to state 6


State 78

   41 stmts: ws dowhilestmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 105
    epsilon  go to state 6


State 79

   42 stmts: ws forstmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 106
    epsilon  go to state 6


State 80

   43 stmts: ws switchstmt ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 107
    epsilon  go to state 6


State 81

    1 mainstmt: ws INT ws TMAIN ws '(' ws ')' ws '{' ws code ws '}' ws END .

    $default  reduce using rule 1 (mainstmt)


State 82

   46 assignment: ws IDENT ws '=' . ws expr ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 108
    epsilon  go to state 6


State 83

   56 whilestmt: ws WHILE ws '(' . ws expr ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 109
    epsilon  go to state 6


State 84

   59 switchstmt: ws SWITCH ws '(' . ws expr ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 110
    epsilon  go to state 6


State 85

   29 declaration: ws INT ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 111
    epsilon  go to state 6


State 86

   30 declaration: ws FLOAT ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 112
    epsilon  go to state 6


State 87

   34 declaration: ws DOUBLE ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 113
    epsilon  go to state 6


State 88

   32 declaration: ws LONG ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 114
    epsilon  go to state 6


State 89

   33 declaration: ws SHORT ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 115
    epsilon  go to state 6


State 90

   31 declaration: ws CHAR ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 116
    epsilon  go to state 6


State 91

   58 forstmt: ws FOR ws '(' . ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 117
    epsilon  go to state 6


State 92

   57 dowhilestmt: ws DO ws '{' . ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 118
    epsilon  go to state 6


State 93

   48 ifstmt: ws IF ws . '(' ws expr ws ')' ws '{' ws code ws '}' ws

    '('  shift, and go to state 119


State 94

   51 elseifstmt: ws . ELSE ws ifstmt ws elseifstmt ws
   52           | ws . epsilon ws

    ELSE  shift, and go to state 120

    ELSE      [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    epsilon  go to state 121


State 95

   47 ifelsestmt: ws ifstmt ws elseifstmt . ws elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 122
    epsilon  go to state 6


State 96

   37 stmts: ws declaration ws ';' ws . stmts ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 20
    epsilon  go to state 6
    stmts    go to state 123


State 97

   10 estmt: ws '=' . ws expr ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 124
    epsilon  go to state 6


State 98

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 125
    epsilon  go to state 6
    expr     go to state 126
    sum      go to state 127


State 99

   11 estmt: ws expr . ws ';' ws stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 128
    epsilon  go to state 6


State 100

   35 initialisation: declaration ws estmt ws .

    $default  reduce using rule 35 (initialisation)


State 101

   38 stmts: ws initialisation ws stmts ws .

    $default  reduce using rule 38 (stmts)


State 102

   45 stmts: ws assignment ws ';' ws .

    $default  reduce using rule 45 (stmts)


State 103

   39 stmts: ws ifelsestmt ws stmts ws .

    $default  reduce using rule 39 (stmts)


State 104

   40 stmts: ws whilestmt ws stmts ws .

    $default  reduce using rule 40 (stmts)


State 105

   41 stmts: ws dowhilestmt ws stmts ws .

    $default  reduce using rule 41 (stmts)


State 106

   42 stmts: ws forstmt ws stmts ws .

    $default  reduce using rule 42 (stmts)


State 107

   43 stmts: ws switchstmt ws stmts ws .

    $default  reduce using rule 43 (stmts)


State 108

   46 assignment: ws IDENT ws '=' ws . expr ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 129


State 109

   56 whilestmt: ws WHILE ws '(' ws . expr ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 130


State 110

   59 switchstmt: ws SWITCH ws '(' ws . expr ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 131


State 111

   29 declaration: ws INT ws IDENT ws .

    $default  reduce using rule 29 (declaration)


State 112

   30 declaration: ws FLOAT ws IDENT ws .

    $default  reduce using rule 30 (declaration)


State 113

   34 declaration: ws DOUBLE ws IDENT ws .

    $default  reduce using rule 34 (declaration)


State 114

   32 declaration: ws LONG ws IDENT ws .

    $default  reduce using rule 32 (declaration)


State 115

   33 declaration: ws SHORT ws IDENT ws .

    $default  reduce using rule 33 (declaration)


State 116

   31 declaration: ws CHAR ws IDENT ws .

    $default  reduce using rule 31 (declaration)


State 117

   58 forstmt: ws FOR ws '(' ws . assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws          go to state 132
    epsilon     go to state 6
    assignment  go to state 133


State 118

   57 dowhilestmt: ws DO ws '{' ws . loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 134
    code      go to state 135
    epsilon   go to state 6
    loopcode  go to state 136


State 119

   48 ifstmt: ws IF ws '(' . ws expr ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 137
    epsilon  go to state 6


State 120

   51 elseifstmt: ws ELSE . ws ifstmt ws elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 138
    epsilon  go to state 6


State 121

   52 elseifstmt: ws epsilon . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 139
    epsilon  go to state 6


State 122

   47 ifelsestmt: ws ifstmt ws elseifstmt ws . elsestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 140
    epsilon   go to state 6
    elsestmt  go to state 141


State 123

   37 stmts: ws declaration ws ';' ws stmts . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 142
    epsilon  go to state 6


State 124

   10 estmt: ws '=' ws . expr ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 143


State 125

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws
   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 144
    epsilon  go to state 6
    expr     go to state 126
    sum      go to state 145
    product  go to state 146


State 126

   12 expr: ws expr . ws '-' ws sum ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 147
    epsilon  go to state 6


State 127

   13 expr: ws sum . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 148
    epsilon  go to state 6


State 128

   11 estmt: ws expr ws . ';' ws stmt ws

    ';'  shift, and go to state 149


State 129

   46 assignment: ws IDENT ws '=' ws expr . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 150
    epsilon  go to state 6


State 130

   56 whilestmt: ws WHILE ws '(' ws expr . ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 151
    epsilon  go to state 6


State 131

   59 switchstmt: ws SWITCH ws '(' ws expr . ws ')' ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 152
    epsilon  go to state 6


State 132

   46 assignment: ws . IDENT ws '=' ws expr ws

    IDENT  shift, and go to state 35


State 133

   58 forstmt: ws FOR ws '(' ws assignment . ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 153
    epsilon  go to state 6


State 134

    6 code: ws . stmts ws
   53 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   54         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 154
    code      go to state 135
    epsilon   go to state 6
    stmts     go to state 21
    loopcode  go to state 155


State 135

   55 loopcode: code .

    $default  reduce using rule 55 (loopcode)


State 136

   57 dowhilestmt: ws DO ws '{' ws loopcode . ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 156
    epsilon  go to state 6


State 137

   48 ifstmt: ws IF ws '(' ws . expr ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 157


State 138

   51 elseifstmt: ws ELSE ws . ifstmt ws elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 46
    epsilon  go to state 6
    ifstmt   go to state 158


State 139

   52 elseifstmt: ws epsilon ws .

    $default  reduce using rule 52 (elseifstmt)


State 140

   49 elsestmt: ws . ELSE ws '(' ws ')' ws '{' ws code ws '}' ws
   50         | ws . epsilon ws

    ELSE  shift, and go to state 159

    $default  reduce using rule 7 (epsilon)

    epsilon  go to state 160


State 141

   47 ifelsestmt: ws ifstmt ws elseifstmt ws elsestmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 161
    epsilon  go to state 6


State 142

   37 stmts: ws declaration ws ';' ws stmts ws .

    $default  reduce using rule 37 (stmts)


State 143

   10 estmt: ws '=' ws expr . ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 162
    epsilon  go to state 6


State 144

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws
   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 163
    epsilon   go to state 6
    expr      go to state 126
    sum       go to state 145
    product   go to state 164
    fraction  go to state 165


State 145

   13 expr: ws sum . ws
   14 sum: ws sum . ws '+' ws product ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 166
    epsilon  go to state 6


State 146

   15 sum: ws product . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 167
    epsilon  go to state 6


State 147

   12 expr: ws expr ws . '-' ws sum ws

    '-'  shift, and go to state 168


State 148

   13 expr: ws sum ws .

    $default  reduce using rule 13 (expr)


State 149

   11 estmt: ws expr ws ';' . ws stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 169
    epsilon  go to state 6


State 150

   46 assignment: ws IDENT ws '=' ws expr ws .

    $default  reduce using rule 46 (assignment)


State 151

   56 whilestmt: ws WHILE ws '(' ws expr ws . ')' ws '{' ws loopcode ws '}' ws

    ')'  shift, and go to state 170


State 152

   59 switchstmt: ws SWITCH ws '(' ws expr ws . ')' ws '{' ws casestmt ws '}' ws

    ')'  shift, and go to state 171


State 153

   58 forstmt: ws FOR ws '(' ws assignment ws . ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    ';'  shift, and go to state 172


State 154

    6 code: ws . stmts ws
   37 stmts: ws . declaration ws ';' ws stmts ws
   38      | ws . initialisation ws stmts ws
   39      | ws . ifelsestmt ws stmts ws
   40      | ws . whilestmt ws stmts ws
   41      | ws . dowhilestmt ws stmts ws
   42      | ws . forstmt ws stmts ws
   43      | ws . switchstmt ws stmts ws
   44      | ws . epsilon ws
   45      | ws . assignment ws ';' ws
   53 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   54         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 173
    code            go to state 135
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    stmts           go to state 21
    assignment      go to state 27
    ifelsestmt      go to state 28
    loopcode        go to state 155
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32


State 155

   53 loopcode: ws loopcode . ws BREAK ws ';' ws loopcode ws
   54         | ws loopcode . ws CONTINUE ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 174
    epsilon  go to state 6


State 156

   57 dowhilestmt: ws DO ws '{' ws loopcode ws . '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '}'  shift, and go to state 175


State 157

   48 ifstmt: ws IF ws '(' ws expr . ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 176
    epsilon  go to state 6


State 158

   51 elseifstmt: ws ELSE ws ifstmt . ws elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 177
    epsilon  go to state 6


State 159

   49 elsestmt: ws ELSE . ws '(' ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 178
    epsilon  go to state 6


State 160

   50 elsestmt: ws epsilon . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 179
    epsilon  go to state 6


State 161

   47 ifelsestmt: ws ifstmt ws elseifstmt ws elsestmt ws .

    $default  reduce using rule 47 (ifelsestmt)


State 162

   10 estmt: ws '=' ws expr ws . ';' ws

    ';'  shift, and go to state 180


State 163

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws
   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 181
    epsilon   go to state 6
    expr      go to state 126
    sum       go to state 145
    product   go to state 164
    fraction  go to state 182
    lessthan  go to state 183


State 164

   15 sum: ws product . ws
   16 product: ws product . ws '*' ws fraction ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 184
    epsilon  go to state 6


State 165

   17 product: ws fraction . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 185
    epsilon  go to state 6


State 166

   13 expr: ws sum ws .
   14 sum: ws sum ws . '+' ws product ws

    '+'  shift, and go to state 186

    $default  reduce using rule 13 (expr)


State 167

   15 sum: ws product ws .

    $default  reduce using rule 15 (sum)


State 168

   12 expr: ws expr ws '-' . ws sum ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 187
    epsilon  go to state 6


State 169

   11 estmt: ws expr ws ';' ws . stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 188
    epsilon  go to state 6
    stmt     go to state 189


State 170

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' . ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 190
    epsilon  go to state 6


State 171

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' . ws '{' ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 191
    epsilon  go to state 6


State 172

   58 forstmt: ws FOR ws '(' ws assignment ws ';' . ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 192
    epsilon  go to state 6


State 173

    6 code: ws . stmts ws
   29 declaration: ws . INT ws IDENT ws
   30            | ws . FLOAT ws IDENT ws
   31            | ws . CHAR ws IDENT ws
   32            | ws . LONG ws IDENT ws
   33            | ws . SHORT ws IDENT ws
   34            | ws . DOUBLE ws IDENT ws
   37 stmts: ws . declaration ws ';' ws stmts ws
   38      | ws . initialisation ws stmts ws
   39      | ws . ifelsestmt ws stmts ws
   40      | ws . whilestmt ws stmts ws
   41      | ws . dowhilestmt ws stmts ws
   42      | ws . forstmt ws stmts ws
   43      | ws . switchstmt ws stmts ws
   44      | ws . epsilon ws
   45      | ws . assignment ws ';' ws
   46 assignment: ws . IDENT ws '=' ws expr ws
   47 ifelsestmt: ws . ifstmt ws elseifstmt ws elsestmt ws
   53 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   54         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws
   56 whilestmt: ws . WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws
   57 dowhilestmt: ws . DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws
   58 forstmt: ws . FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws
   59 switchstmt: ws . SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

    IDENT   shift, and go to state 35
    WHILE   shift, and go to state 36
    SWITCH  shift, and go to state 37
    INT     shift, and go to state 38
    FLOAT   shift, and go to state 39
    DOUBLE  shift, and go to state 40
    LONG    shift, and go to state 41
    SHORT   shift, and go to state 42
    CHAR    shift, and go to state 43
    FOR     shift, and go to state 44
    DO      shift, and go to state 45
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT     [reduce using rule 7 (epsilon)]
    WHILE     [reduce using rule 7 (epsilon)]
    SWITCH    [reduce using rule 7 (epsilon)]
    INT       [reduce using rule 7 (epsilon)]
    FLOAT     [reduce using rule 7 (epsilon)]
    DOUBLE    [reduce using rule 7 (epsilon)]
    LONG      [reduce using rule 7 (epsilon)]
    SHORT     [reduce using rule 7 (epsilon)]
    CHAR      [reduce using rule 7 (epsilon)]
    FOR       [reduce using rule 7 (epsilon)]
    DO        [reduce using rule 7 (epsilon)]
    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 193
    code            go to state 135
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    stmts           go to state 21
    assignment      go to state 27
    ifelsestmt      go to state 28
    ifstmt          go to state 47
    loopcode        go to state 155
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32


State 174

   53 loopcode: ws loopcode ws . BREAK ws ';' ws loopcode ws
   54         | ws loopcode ws . CONTINUE ws ';' ws loopcode ws

    BREAK     shift, and go to state 194
    CONTINUE  shift, and go to state 195


State 175

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' . ws WHILE ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 196
    epsilon  go to state 6


State 176

   48 ifstmt: ws IF ws '(' ws expr ws . ')' ws '{' ws code ws '}' ws

    ')'  shift, and go to state 197


State 177

   51 elseifstmt: ws ELSE ws ifstmt ws . elseifstmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws          go to state 94
    epsilon     go to state 6
    elseifstmt  go to state 198


State 178

   49 elsestmt: ws ELSE ws . '(' ws ')' ws '{' ws code ws '}' ws

    '('  shift, and go to state 199


State 179

   50 elsestmt: ws epsilon ws .

    $default  reduce using rule 50 (elsestmt)


State 180

   10 estmt: ws '=' ws expr ws ';' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 200
    epsilon  go to state 6


State 181

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws
   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 201
    epsilon   go to state 6
    expr      go to state 126
    sum       go to state 145
    product   go to state 164
    fraction  go to state 182
    lessthan  go to state 202
    equals    go to state 203


State 182

   17 product: ws fraction . ws
   18 fraction: ws fraction . ws '/' ws lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 204
    epsilon  go to state 6


State 183

   19 fraction: ws lessthan . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 205
    epsilon  go to state 6


State 184

   15 sum: ws product ws .
   16 product: ws product ws . '*' ws fraction ws

    '*'  shift, and go to state 206

    $default  reduce using rule 15 (sum)


State 185

   17 product: ws fraction ws .

    $default  reduce using rule 17 (product)


State 186

   14 sum: ws sum ws '+' . ws product ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 207
    epsilon  go to state 6


State 187

   12 expr: ws expr ws '-' ws . sum ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 208
    epsilon  go to state 6
    sum      go to state 209


State 188

    8 stmt: ws . expr ws ';' ws
    9     | ws . expr ws ';' ws stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 210


State 189

   11 estmt: ws expr ws ';' ws stmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 211
    epsilon  go to state 6


State 190

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws . '{' ws loopcode ws '}' ws

    '{'  shift, and go to state 212


State 191

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws . '{' ws casestmt ws '}' ws

    '{'  shift, and go to state 213


State 192

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws . IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    IDENT  shift, and go to state 214


State 193

    6 code: ws . stmts ws
   29 declaration: ws . INT ws IDENT ws
   30            | ws . FLOAT ws IDENT ws
   31            | ws . CHAR ws IDENT ws
   32            | ws . LONG ws IDENT ws
   33            | ws . SHORT ws IDENT ws
   34            | ws . DOUBLE ws IDENT ws
   37 stmts: ws . declaration ws ';' ws stmts ws
   38      | ws . initialisation ws stmts ws
   39      | ws . ifelsestmt ws stmts ws
   40      | ws . whilestmt ws stmts ws
   41      | ws . dowhilestmt ws stmts ws
   42      | ws . forstmt ws stmts ws
   43      | ws . switchstmt ws stmts ws
   44      | ws . epsilon ws
   45      | ws . assignment ws ';' ws
   46 assignment: ws . IDENT ws '=' ws expr ws
   47 ifelsestmt: ws . ifstmt ws elseifstmt ws elsestmt ws
   48 ifstmt: ws . IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws
   53 loopcode: ws . loopcode ws BREAK ws ';' ws loopcode ws
   54         | ws . loopcode ws CONTINUE ws ';' ws loopcode ws
   56 whilestmt: ws . WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws
   57 dowhilestmt: ws . DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws
   58 forstmt: ws . FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws
   59 switchstmt: ws . SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws

    IDENT   shift, and go to state 35
    IF      shift, and go to state 69
    WHILE   shift, and go to state 36
    SWITCH  shift, and go to state 37
    INT     shift, and go to state 38
    FLOAT   shift, and go to state 39
    DOUBLE  shift, and go to state 40
    LONG    shift, and go to state 41
    SHORT   shift, and go to state 42
    CHAR    shift, and go to state 43
    FOR     shift, and go to state 44
    DO      shift, and go to state 45
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT     [reduce using rule 7 (epsilon)]
    IF        [reduce using rule 7 (epsilon)]
    WHILE     [reduce using rule 7 (epsilon)]
    SWITCH    [reduce using rule 7 (epsilon)]
    INT       [reduce using rule 7 (epsilon)]
    FLOAT     [reduce using rule 7 (epsilon)]
    DOUBLE    [reduce using rule 7 (epsilon)]
    LONG      [reduce using rule 7 (epsilon)]
    SHORT     [reduce using rule 7 (epsilon)]
    CHAR      [reduce using rule 7 (epsilon)]
    FOR       [reduce using rule 7 (epsilon)]
    DO        [reduce using rule 7 (epsilon)]
    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws              go to state 193
    code            go to state 135
    epsilon         go to state 24
    declaration     go to state 25
    initialisation  go to state 26
    stmts           go to state 21
    assignment      go to state 27
    ifelsestmt      go to state 28
    ifstmt          go to state 47
    loopcode        go to state 155
    whilestmt       go to state 29
    dowhilestmt     go to state 30
    forstmt         go to state 31
    switchstmt      go to state 32


State 194

   53 loopcode: ws loopcode ws BREAK . ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 215
    epsilon  go to state 6


State 195

   54 loopcode: ws loopcode ws CONTINUE . ws ';' ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 216
    epsilon  go to state 6


State 196

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws . WHILE ws '(' ws expr ws ')' ws ';' ws

    WHILE  shift, and go to state 217


State 197

   48 ifstmt: ws IF ws '(' ws expr ws ')' . ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 218
    epsilon  go to state 6


State 198

   51 elseifstmt: ws ELSE ws ifstmt ws elseifstmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 219
    epsilon  go to state 6


State 199

   49 elsestmt: ws ELSE ws '(' . ws ')' ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 220
    epsilon  go to state 6


State 200

   10 estmt: ws '=' ws expr ws ';' ws .

    $default  reduce using rule 10 (estmt)


State 201

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws
   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 221
    epsilon      go to state 6
    expr         go to state 126
    sum          go to state 145
    product      go to state 164
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 223


State 202

   19 fraction: ws lessthan . ws
   20 lessthan: ws lessthan . ws '<' ws equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 224
    epsilon  go to state 6


State 203

   21 lessthan: ws equals . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 225
    epsilon  go to state 6


State 204

   17 product: ws fraction ws .
   18 fraction: ws fraction ws . '/' ws lessthan ws

    '/'  shift, and go to state 226

    $default  reduce using rule 17 (product)


State 205

   19 fraction: ws lessthan ws .

    $default  reduce using rule 19 (fraction)


State 206

   16 product: ws product ws '*' . ws fraction ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 227
    epsilon  go to state 6


State 207

   14 sum: ws sum ws '+' ws . product ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 228
    epsilon  go to state 6
    product  go to state 229


State 208

   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 230
    epsilon  go to state 6
    sum      go to state 231
    product  go to state 146


State 209

   12 expr: ws expr ws '-' ws sum . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 232
    epsilon  go to state 6


State 210

    8 stmt: ws expr . ws ';' ws
    9     | ws expr . ws ';' ws stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 233
    epsilon  go to state 6


State 211

   11 estmt: ws expr ws ';' ws stmt ws .

    $default  reduce using rule 11 (estmt)


State 212

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' . ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 234
    epsilon  go to state 6


State 213

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' . ws casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 235
    epsilon  go to state 6


State 214

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT . ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 236
    epsilon  go to state 6


State 215

   53 loopcode: ws loopcode ws BREAK ws . ';' ws loopcode ws

    ';'  shift, and go to state 237


State 216

   54 loopcode: ws loopcode ws CONTINUE ws . ';' ws loopcode ws

    ';'  shift, and go to state 238


State 217

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE . ws '(' ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 239
    epsilon  go to state 6


State 218

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws . '{' ws code ws '}' ws

    '{'  shift, and go to state 240


State 219

   51 elseifstmt: ws ELSE ws ifstmt ws elseifstmt ws .

    $default  reduce using rule 51 (elseifstmt)


State 220

   49 elsestmt: ws ELSE ws '(' ws . ')' ws '{' ws code ws '}' ws

    ')'  shift, and go to state 241


State 221

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws
   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 242
    epsilon      go to state 6
    expr         go to state 126
    sum          go to state 145
    product      go to state 164
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 222

   21 lessthan: ws equals . ws
   22 equals: ws equals . ws EQUALSCHECK ws greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 245
    epsilon  go to state 6


State 223

   23 equals: ws greaterthan . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 246
    epsilon  go to state 6


State 224

   19 fraction: ws lessthan ws .
   20 lessthan: ws lessthan ws . '<' ws equals ws

    '<'  shift, and go to state 247

    $default  reduce using rule 19 (fraction)


State 225

   21 lessthan: ws equals ws .

    $default  reduce using rule 21 (lessthan)


State 226

   18 fraction: ws fraction ws '/' . ws lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 248
    epsilon  go to state 6


State 227

   16 product: ws product ws '*' ws . fraction ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 249
    epsilon   go to state 6
    fraction  go to state 250


State 228

   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 251
    epsilon   go to state 6
    product   go to state 252
    fraction  go to state 165


State 229

   14 sum: ws sum ws '+' ws product . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 253
    epsilon  go to state 6


State 230

   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 254
    epsilon   go to state 6
    sum       go to state 231
    product   go to state 164
    fraction  go to state 165


State 231

   14 sum: ws sum . ws '+' ws product ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 255
    epsilon  go to state 6


State 232

   12 expr: ws expr ws '-' ws sum ws .

    $default  reduce using rule 12 (expr)


State 233

    8 stmt: ws expr ws . ';' ws
    9     | ws expr ws . ';' ws stmt ws

    ';'  shift, and go to state 256


State 234

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws . loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 134
    code      go to state 135
    epsilon   go to state 6
    loopcode  go to state 257


State 235

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws . casestmt ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 258
    epsilon   go to state 259
    casestmt  go to state 260


State 236

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws . condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    EQUALSCHECK  shift, and go to state 261
    '<'          shift, and go to state 262
    '>'          shift, and go to state 263

    condition  go to state 264


State 237

   53 loopcode: ws loopcode ws BREAK ws ';' . ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 265
    epsilon  go to state 6


State 238

   54 loopcode: ws loopcode ws CONTINUE ws ';' . ws loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 266
    epsilon  go to state 6


State 239

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws . '(' ws expr ws ')' ws ';' ws

    '('  shift, and go to state 267


State 240

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' . ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 268
    epsilon  go to state 6


State 241

   49 elsestmt: ws ELSE ws '(' ws ')' . ws '{' ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 269
    epsilon  go to state 6


State 242

   12 expr: ws . expr ws '-' ws sum ws
   13     | ws . sum ws
   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws
   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT   [reduce using rule 7 (epsilon)]
    NUMBER  [reduce using rule 7 (epsilon)]
    '('     [reduce using rule 7 (epsilon)]
    '\n'    [reduce using rule 7 (epsilon)]
    '\t'    [reduce using rule 7 (epsilon)]
    ' '     [reduce using rule 7 (epsilon)]

    ws           go to state 242
    epsilon      go to state 6
    expr         go to state 126
    sum          go to state 145
    product      go to state 164
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 243

   23 equals: ws greaterthan . ws
   24 greaterthan: ws greaterthan . ws '>' ws factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 273
    epsilon  go to state 6


State 244

   25 greaterthan: ws factor . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 274
    epsilon  go to state 6


State 245

   21 lessthan: ws equals ws .
   22 equals: ws equals ws . EQUALSCHECK ws greaterthan ws

    EQUALSCHECK  shift, and go to state 275

    $default  reduce using rule 21 (lessthan)


State 246

   23 equals: ws greaterthan ws .

    $default  reduce using rule 23 (equals)


State 247

   20 lessthan: ws lessthan ws '<' . ws equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 276
    epsilon  go to state 6


State 248

   18 fraction: ws fraction ws '/' ws . lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 277
    epsilon   go to state 6
    lessthan  go to state 278


State 249

   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 279
    epsilon   go to state 6
    fraction  go to state 280
    lessthan  go to state 183


State 250

   16 product: ws product ws '*' ws fraction . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 281
    epsilon  go to state 6


State 251

   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 282
    epsilon   go to state 6
    product   go to state 252
    fraction  go to state 182
    lessthan  go to state 183


State 252

   16 product: ws product . ws '*' ws fraction ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 283
    epsilon  go to state 6


State 253

   14 sum: ws sum ws '+' ws product ws .

    $default  reduce using rule 14 (sum)


State 254

   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 284
    epsilon   go to state 6
    sum       go to state 231
    product   go to state 164
    fraction  go to state 182
    lessthan  go to state 183


State 255

   14 sum: ws sum ws . '+' ws product ws

    '+'  shift, and go to state 186


State 256

    8 stmt: ws expr ws ';' . ws
    9     | ws expr ws ';' . ws stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 285
    epsilon  go to state 6


State 257

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 286
    epsilon  go to state 6


State 258

   60 casestmt: ws . CASE ws expr ws ':' ws code ws casestmt ws

    CASE  shift, and go to state 287


State 259

    5 ws: epsilon .
   61 casestmt: epsilon .

    CASE      reduce using rule 5 (ws)
    $default  reduce using rule 61 (casestmt)


State 260

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 288
    epsilon  go to state 6


State 261

   64 condition: EQUALSCHECK .

    $default  reduce using rule 64 (condition)


State 262

   62 condition: '<' .

    $default  reduce using rule 62 (condition)


State 263

   63 condition: '>' .

    $default  reduce using rule 63 (condition)


State 264

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition . ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 289
    epsilon  go to state 6


State 265

   53 loopcode: ws loopcode ws BREAK ws ';' ws . loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 134
    code      go to state 135
    epsilon   go to state 6
    loopcode  go to state 290


State 266

   54 loopcode: ws loopcode ws CONTINUE ws ';' ws . loopcode ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 134
    code      go to state 135
    epsilon   go to state 6
    loopcode  go to state 291


State 267

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' . ws expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 292
    epsilon  go to state 6


State 268

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws . code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 293
    epsilon  go to state 6


State 269

   49 elsestmt: ws ELSE ws '(' ws ')' ws . '{' ws code ws '}' ws

    '{'  shift, and go to state 294


State 270

   28 factor: ws IDENT . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 295
    epsilon  go to state 6


State 271

   26 factor: ws NUMBER . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 296
    epsilon  go to state 6


State 272

   27 factor: ws '(' . ws expr ws ')' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 297
    epsilon  go to state 6


State 273

   23 equals: ws greaterthan ws .
   24 greaterthan: ws greaterthan ws . '>' ws factor ws

    '>'  shift, and go to state 298

    $default  reduce using rule 23 (equals)


State 274

   25 greaterthan: ws factor ws .

    $default  reduce using rule 25 (greaterthan)


State 275

   22 equals: ws equals ws EQUALSCHECK . ws greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 299
    epsilon  go to state 6


State 276

   20 lessthan: ws lessthan ws '<' ws . equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 300
    epsilon  go to state 6
    equals   go to state 301


State 277

   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 302
    epsilon   go to state 6
    lessthan  go to state 303
    equals    go to state 203


State 278

   18 fraction: ws fraction ws '/' ws lessthan . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 304
    epsilon  go to state 6


State 279

   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 305
    epsilon   go to state 6
    fraction  go to state 280
    lessthan  go to state 202
    equals    go to state 203


State 280

   18 fraction: ws fraction . ws '/' ws lessthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 306
    epsilon  go to state 6


State 281

   16 product: ws product ws '*' ws fraction ws .

    $default  reduce using rule 16 (product)


State 282

   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 307
    epsilon   go to state 6
    product   go to state 252
    fraction  go to state 182
    lessthan  go to state 202
    equals    go to state 203


State 283

   16 product: ws product ws . '*' ws fraction ws

    '*'  shift, and go to state 206


State 284

   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 308
    epsilon   go to state 6
    sum       go to state 231
    product   go to state 164
    fraction  go to state 182
    lessthan  go to state 202
    equals    go to state 203


State 285

    8 stmt: ws expr ws ';' ws .
    9     | ws expr ws ';' ws . stmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    IDENT     reduce using rule 7 (epsilon)
    IDENT     [reduce using rule 8 (stmt)]
    NUMBER    reduce using rule 7 (epsilon)
    '('       reduce using rule 7 (epsilon)
    '\n'      [reduce using rule 7 (epsilon)]
    '\n'      [reduce using rule 8 (stmt)]
    '\t'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 8 (stmt)]
    ' '       [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 8 (stmt)]
    $default  reduce using rule 8 (stmt)

    ws       go to state 188
    epsilon  go to state 6
    stmt     go to state 309


State 286

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws . '}' ws

    '}'  shift, and go to state 310


State 287

   60 casestmt: ws CASE . ws expr ws ':' ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 311
    epsilon  go to state 6


State 288

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws . '}' ws

    '}'  shift, and go to state 312


State 289

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws . expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 313


State 290

   53 loopcode: ws loopcode ws BREAK ws ';' ws loopcode . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 314
    epsilon  go to state 6


State 291

   54 loopcode: ws loopcode ws CONTINUE ws ';' ws loopcode . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 315
    epsilon  go to state 6


State 292

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws . expr ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 316


State 293

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 317
    epsilon  go to state 6


State 294

   49 elsestmt: ws ELSE ws '(' ws ')' ws '{' . ws code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 318
    epsilon  go to state 6


State 295

   28 factor: ws IDENT ws .

    $default  reduce using rule 28 (factor)


State 296

   26 factor: ws NUMBER ws .

    $default  reduce using rule 26 (factor)


State 297

   27 factor: ws '(' ws . expr ws ')' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 319


State 298

   24 greaterthan: ws greaterthan ws '>' . ws factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 320
    epsilon  go to state 6


State 299

   22 equals: ws equals ws EQUALSCHECK ws . greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 321
    epsilon      go to state 6
    greaterthan  go to state 322


State 300

   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 323
    epsilon      go to state 6
    equals       go to state 324
    greaterthan  go to state 223


State 301

   20 lessthan: ws lessthan ws '<' ws equals . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 325
    epsilon  go to state 6


State 302

   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 326
    epsilon      go to state 6
    lessthan     go to state 303
    equals       go to state 222
    greaterthan  go to state 223


State 303

   20 lessthan: ws lessthan . ws '<' ws equals ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 327
    epsilon  go to state 6


State 304

   18 fraction: ws fraction ws '/' ws lessthan ws .

    $default  reduce using rule 18 (fraction)


State 305

   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 328
    epsilon      go to state 6
    fraction     go to state 280
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 223


State 306

   18 fraction: ws fraction ws . '/' ws lessthan ws

    '/'  shift, and go to state 226


State 307

   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 329
    epsilon      go to state 6
    product      go to state 252
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 223


State 308

   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 330
    epsilon      go to state 6
    sum          go to state 231
    product      go to state 164
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 223


State 309

    9 stmt: ws expr ws ';' ws stmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 331
    epsilon  go to state 6


State 310

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 332
    epsilon  go to state 6


State 311

   60 casestmt: ws CASE ws . expr ws ':' ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 98
    epsilon  go to state 6
    expr     go to state 333


State 312

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 334
    epsilon  go to state 6


State 313

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr . ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 335
    epsilon  go to state 6


State 314

   53 loopcode: ws loopcode ws BREAK ws ';' ws loopcode ws .

    $default  reduce using rule 53 (loopcode)


State 315

   54 loopcode: ws loopcode ws CONTINUE ws ';' ws loopcode ws .

    $default  reduce using rule 54 (loopcode)


State 316

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr . ws ')' ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 336
    epsilon  go to state 6


State 317

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws . '}' ws

    '}'  shift, and go to state 337


State 318

   49 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws . code ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 338
    epsilon  go to state 6


State 319

   27 factor: ws '(' ws expr . ws ')' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 339
    epsilon  go to state 6


State 320

   24 greaterthan: ws greaterthan ws '>' ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 340
    epsilon  go to state 6
    factor   go to state 341


State 321

   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 342
    epsilon      go to state 6
    greaterthan  go to state 343
    factor       go to state 244


State 322

   22 equals: ws equals ws EQUALSCHECK ws greaterthan . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 344
    epsilon  go to state 6


State 323

   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 345
    epsilon      go to state 6
    equals       go to state 324
    greaterthan  go to state 243
    factor       go to state 244


State 324

   22 equals: ws equals . ws EQUALSCHECK ws greaterthan ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 346
    epsilon  go to state 6


State 325

   20 lessthan: ws lessthan ws '<' ws equals ws .

    $default  reduce using rule 20 (lessthan)


State 326

   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 347
    epsilon      go to state 6
    lessthan     go to state 303
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 327

   20 lessthan: ws lessthan ws . '<' ws equals ws

    '<'  shift, and go to state 247


State 328

   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 348
    epsilon      go to state 6
    fraction     go to state 280
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 329

   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 349
    epsilon      go to state 6
    product      go to state 252
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 330

   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws           go to state 350
    epsilon      go to state 6
    sum          go to state 231
    product      go to state 164
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 331

    9 stmt: ws expr ws ';' ws stmt ws .

    $default  reduce using rule 9 (stmt)


State 332

   56 whilestmt: ws WHILE ws '(' ws expr ws ')' ws '{' ws loopcode ws '}' ws .

    $default  reduce using rule 56 (whilestmt)


State 333

   60 casestmt: ws CASE ws expr . ws ':' ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 351
    epsilon  go to state 6


State 334

   59 switchstmt: ws SWITCH ws '(' ws expr ws ')' ws '{' ws casestmt ws '}' ws .

    $default  reduce using rule 59 (switchstmt)


State 335

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws . ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    ';'  shift, and go to state 352


State 336

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws . ')' ws ';' ws

    ')'  shift, and go to state 353


State 337

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 354
    epsilon  go to state 6


State 338

   49 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 355
    epsilon  go to state 6


State 339

   27 factor: ws '(' ws expr ws . ')' ws

    ')'  shift, and go to state 356


State 340

   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272


State 341

   24 greaterthan: ws greaterthan ws '>' ws factor . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 357
    epsilon  go to state 6


State 342

   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws
   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT   [reduce using rule 7 (epsilon)]
    NUMBER  [reduce using rule 7 (epsilon)]
    '('     [reduce using rule 7 (epsilon)]
    '\n'    [reduce using rule 7 (epsilon)]
    '\t'    [reduce using rule 7 (epsilon)]
    ' '     [reduce using rule 7 (epsilon)]

    ws           go to state 342
    epsilon      go to state 6
    greaterthan  go to state 343
    factor       go to state 244


State 343

   24 greaterthan: ws greaterthan . ws '>' ws factor ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 358
    epsilon  go to state 6


State 344

   22 equals: ws equals ws EQUALSCHECK ws greaterthan ws .

    $default  reduce using rule 22 (equals)


State 345

   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws
   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT   [reduce using rule 7 (epsilon)]
    NUMBER  [reduce using rule 7 (epsilon)]
    '('     [reduce using rule 7 (epsilon)]
    '\n'    [reduce using rule 7 (epsilon)]
    '\t'    [reduce using rule 7 (epsilon)]
    ' '     [reduce using rule 7 (epsilon)]

    ws           go to state 345
    epsilon      go to state 6
    equals       go to state 324
    greaterthan  go to state 243
    factor       go to state 244


State 346

   22 equals: ws equals ws . EQUALSCHECK ws greaterthan ws

    EQUALSCHECK  shift, and go to state 275


State 347

   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws
   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT   [reduce using rule 7 (epsilon)]
    NUMBER  [reduce using rule 7 (epsilon)]
    '('     [reduce using rule 7 (epsilon)]
    '\n'    [reduce using rule 7 (epsilon)]
    '\t'    [reduce using rule 7 (epsilon)]
    ' '     [reduce using rule 7 (epsilon)]

    ws           go to state 347
    epsilon      go to state 6
    lessthan     go to state 303
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 348

   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws
   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT   [reduce using rule 7 (epsilon)]
    NUMBER  [reduce using rule 7 (epsilon)]
    '('     [reduce using rule 7 (epsilon)]
    '\n'    [reduce using rule 7 (epsilon)]
    '\t'    [reduce using rule 7 (epsilon)]
    ' '     [reduce using rule 7 (epsilon)]

    ws           go to state 348
    epsilon      go to state 6
    fraction     go to state 280
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 349

   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws
   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT   [reduce using rule 7 (epsilon)]
    NUMBER  [reduce using rule 7 (epsilon)]
    '('     [reduce using rule 7 (epsilon)]
    '\n'    [reduce using rule 7 (epsilon)]
    '\t'    [reduce using rule 7 (epsilon)]
    ' '     [reduce using rule 7 (epsilon)]

    ws           go to state 349
    epsilon      go to state 6
    product      go to state 252
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 350

   14 sum: ws . sum ws '+' ws product ws
   15    | ws . product ws
   16 product: ws . product ws '*' ws fraction ws
   17        | ws . fraction ws
   18 fraction: ws . fraction ws '/' ws lessthan ws
   19         | ws . lessthan ws
   20 lessthan: ws . lessthan ws '<' ws equals ws
   21         | ws . equals ws
   22 equals: ws . equals ws EQUALSCHECK ws greaterthan ws
   23       | ws . greaterthan ws
   24 greaterthan: ws . greaterthan ws '>' ws factor ws
   25            | ws . factor ws
   26 factor: ws . NUMBER ws
   27       | ws . '(' ws expr ws ')' ws
   28       | ws . IDENT ws

    IDENT   shift, and go to state 270
    NUMBER  shift, and go to state 271
    '('     shift, and go to state 272
    '\n'    shift, and go to state 1
    '\t'    shift, and go to state 2
    ' '     shift, and go to state 3

    IDENT   [reduce using rule 7 (epsilon)]
    NUMBER  [reduce using rule 7 (epsilon)]
    '('     [reduce using rule 7 (epsilon)]
    '\n'    [reduce using rule 7 (epsilon)]
    '\t'    [reduce using rule 7 (epsilon)]
    ' '     [reduce using rule 7 (epsilon)]

    ws           go to state 350
    epsilon      go to state 6
    sum          go to state 231
    product      go to state 164
    fraction     go to state 182
    lessthan     go to state 202
    equals       go to state 222
    greaterthan  go to state 243
    factor       go to state 244


State 351

   60 casestmt: ws CASE ws expr ws . ':' ws code ws casestmt ws

    ':'  shift, and go to state 359


State 352

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' . ws assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 360
    epsilon  go to state 6


State 353

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' . ws ';' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 361
    epsilon  go to state 6


State 354

   48 ifstmt: ws IF ws '(' ws expr ws ')' ws '{' ws code ws '}' ws .

    $default  reduce using rule 48 (ifstmt)


State 355

   49 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws . '}' ws

    '}'  shift, and go to state 362


State 356

   27 factor: ws '(' ws expr ws ')' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 363
    epsilon  go to state 6


State 357

   24 greaterthan: ws greaterthan ws '>' ws factor ws .

    $default  reduce using rule 24 (greaterthan)


State 358

   24 greaterthan: ws greaterthan ws . '>' ws factor ws

    '>'  shift, and go to state 298


State 359

   60 casestmt: ws CASE ws expr ws ':' . ws code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 364
    epsilon  go to state 6


State 360

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws . assignment ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws          go to state 132
    epsilon     go to state 6
    assignment  go to state 365


State 361

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws . ';' ws

    ';'  shift, and go to state 366


State 362

   49 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 367
    epsilon  go to state 6


State 363

   27 factor: ws '(' ws expr ws ')' ws .

    $default  reduce using rule 27 (factor)


State 364

   60 casestmt: ws CASE ws expr ws ':' ws . code ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 18
    code     go to state 368
    epsilon  go to state 6


State 365

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment . ws ')' ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 369
    epsilon  go to state 6


State 366

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 370
    epsilon  go to state 6


State 367

   49 elsestmt: ws ELSE ws '(' ws ')' ws '{' ws code ws '}' ws .

    $default  reduce using rule 49 (elsestmt)


State 368

   60 casestmt: ws CASE ws expr ws ':' ws code . ws casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 371
    epsilon  go to state 6


State 369

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws . ')' ws '{' ws loopcode ws '}' ws

    ')'  shift, and go to state 372


State 370

   57 dowhilestmt: ws DO ws '{' ws loopcode ws '}' ws WHILE ws '(' ws expr ws ')' ws ';' ws .

    $default  reduce using rule 57 (dowhilestmt)


State 371

   60 casestmt: ws CASE ws expr ws ':' ws code ws . casestmt ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 258
    epsilon   go to state 259
    casestmt  go to state 373


State 372

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' . ws '{' ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 374
    epsilon  go to state 6


State 373

   60 casestmt: ws CASE ws expr ws ':' ws code ws casestmt . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 375
    epsilon  go to state 6


State 374

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws . '{' ws loopcode ws '}' ws

    '{'  shift, and go to state 376


State 375

   60 casestmt: ws CASE ws expr ws ':' ws code ws casestmt ws .

    $default  reduce using rule 60 (casestmt)


State 376

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' . ws loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 377
    epsilon  go to state 6


State 377

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws . loopcode ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws        go to state 134
    code      go to state 135
    epsilon   go to state 6
    loopcode  go to state 378


State 378

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode . ws '}' ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    $default  reduce using rule 7 (epsilon)

    ws       go to state 379
    epsilon  go to state 6


State 379

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws . '}' ws

    '}'  shift, and go to state 380


State 380

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' . ws

    '\n'  shift, and go to state 1
    '\t'  shift, and go to state 2
    ' '   shift, and go to state 3

    '\n'      [reduce using rule 7 (epsilon)]
    '\t'      [reduce using rule 7 (epsilon)]
    ' '       [reduce using rule 7 (epsilon)]
    $default  reduce using rule 7 (epsilon)

    ws       go to state 381
    epsilon  go to state 6


State 381

   58 forstmt: ws FOR ws '(' ws assignment ws ';' ws IDENT ws condition ws expr ws ';' ws assignment ws ')' ws '{' ws loopcode ws '}' ws .

    $default  reduce using rule 58 (forstmt)
